import { MessageHandlersMap, MessageHandlers, EventHandlersMap, EventHandlers, StateExpiredHandlersMap, StateExpiredHandlers, HookHandlersMap, HookData, HookHandlers, ActionHandlers, BotHandlers } from './server/types';
import { BasePlugin } from './types/generic';
export type PluginImplementationProps<TPlugin extends BasePlugin = BasePlugin> = {
    actions: ActionHandlers<TPlugin>;
};
export type PluginRuntimeProps<TPlugin extends BasePlugin = BasePlugin> = {
    configuration: TPlugin['configuration'];
    interfaces: {
        [K in keyof TPlugin['interfaces']]: {
            name: string;
            version: string;
        };
    };
};
export declare class PluginImplementation<TPlugin extends BasePlugin = BasePlugin> implements BotHandlers<TPlugin> {
    readonly props: PluginImplementationProps<TPlugin>;
    private _runtimeProps;
    readonly actionHandlers: ActionHandlers<TPlugin>;
    readonly messageHandlers: MessageHandlersMap<TPlugin>;
    readonly eventHandlers: EventHandlersMap<TPlugin>;
    readonly stateExpiredHandlers: StateExpiredHandlersMap<TPlugin>;
    readonly hookHandlers: HookHandlersMap<TPlugin>;
    constructor(props: PluginImplementationProps<TPlugin>);
    initialize(config: PluginRuntimeProps<TPlugin>): this;
    get config(): PluginRuntimeProps<TPlugin>;
    readonly on: {
        message: <T extends keyof MessageHandlersMap<TPlugin>>(type: T, handler: MessageHandlers<TPlugin>[T]) => void;
        event: <T extends keyof EventHandlersMap<TPlugin>>(type: T, handler: EventHandlers<TPlugin>[T]) => void;
        stateExpired: <T extends keyof StateExpiredHandlersMap<TPlugin>>(type: T, handler: StateExpiredHandlers<TPlugin>[T]) => void;
        beforeIncomingEvent: <T extends keyof HookData<TPlugin>["before_incoming_event"]>(type: T, handler: HookHandlers<TPlugin>["before_incoming_event"][T]) => void;
        beforeIncomingMessage: <T extends keyof HookData<TPlugin>["before_incoming_message"]>(type: T, handler: HookHandlers<TPlugin>["before_incoming_message"][T]) => void;
        beforeOutgoingMessage: <T extends keyof HookData<TPlugin>["before_outgoing_message"]>(type: T, handler: HookHandlers<TPlugin>["before_outgoing_message"][T]) => void;
        beforeOutgoingCallAction: <T extends keyof HookData<TPlugin>["before_outgoing_call_action"]>(type: T, handler: HookHandlers<TPlugin>["before_outgoing_call_action"][T]) => void;
        afterIncomingEvent: <T extends keyof HookData<TPlugin>["after_incoming_event"]>(type: T, handler: HookHandlers<TPlugin>["after_incoming_event"][T]) => void;
        afterIncomingMessage: <T extends keyof HookData<TPlugin>["after_incoming_message"]>(type: T, handler: HookHandlers<TPlugin>["after_incoming_message"][T]) => void;
        afterOutgoingMessage: <T extends keyof HookData<TPlugin>["after_outgoing_message"]>(type: T, handler: HookHandlers<TPlugin>["after_outgoing_message"][T]) => void;
        afterOutgoingCallAction: <T extends keyof HookData<TPlugin>["after_outgoing_call_action"]>(type: T, handler: HookHandlers<TPlugin>["after_outgoing_call_action"][T]) => void;
    };
}
