{
  "version": 3,
  "sources": ["../../src/command-implementations/chat-command.ts"],
  "sourcesContent": ["import * as chat from '@botpress/chat'\nimport * as client from '@botpress/client'\nimport semver from 'semver'\nimport { ApiClient } from '../api'\nimport { Chat } from '../chat'\nimport type commandDefinitions from '../command-definitions'\nimport * as consts from '../consts'\nimport * as errors from '../errors'\nimport * as utils from '../utils'\nimport { GlobalCommand } from './global-command'\n\ntype IntegrationInstance = {\n  id: string\n  instance: client.Bot['integrations'][string]\n}\n\nexport type ChatCommandDefinition = typeof commandDefinitions.chat\nexport class ChatCommand extends GlobalCommand<ChatCommandDefinition> {\n  public async run(): Promise<void> {\n    if (process.platform === 'win32') {\n      this.logger.warn('The chat command was not tested on Windows and may not work as expected')\n    }\n\n    const api = await this.ensureLoginAndCreateClient(this.argv)\n    const botId = this.argv.botId ?? (await this._selectBot(api))\n    const { bot } = await api.client.getBot({ id: botId }).catch((thrown) => {\n      throw errors.BotpressCLIError.wrap(thrown, `Could not fetch bot \"${botId}\"`)\n    })\n\n    const targetChatVersion = this._getChatApiTargetVersionRange()\n    let chatIntegrationInstance = this._findChatInstance(bot)\n\n    if (!chatIntegrationInstance) {\n      this.logger.log(`Chat integration with version ${targetChatVersion} is not installed in the selected bot`)\n      const confirmInstall = await this.prompt.confirm('Do you wish to install it now?')\n      if (!confirmInstall) {\n        throw new errors.BotpressCLIError('Chat integration is required to proceed')\n      }\n      chatIntegrationInstance = await this._installChatIntegration(api, botId)\n    }\n\n    const { webhookId } = chatIntegrationInstance.instance\n    const chatApiBaseUrl = this._getChatApiUrl(api)\n    this.logger.debug(`using chat api url: \"${chatApiBaseUrl}\"`)\n\n    const chatApiUrl = `${chatApiBaseUrl}/${webhookId}`\n    const chatClient = await chat.Client.connect({ apiUrl: chatApiUrl })\n    await this._chat(chatClient)\n  }\n\n  private _chat = async (client: chat.AuthenticatedClient): Promise<void> => {\n    const convLine = this.logger.line()\n    convLine.started('Creating a conversation...')\n    const { conversation } = await client.createConversation({})\n    convLine.success(`Conversation created with id \"${conversation.id}\"`)\n    convLine.commit()\n\n    const chat = Chat.launch({ client, conversationId: conversation.id })\n    await chat.wait()\n  }\n\n  private _getChatApiUrl = (api: ApiClient): string => {\n    if (this.argv.chatApiUrl) {\n      return this.argv.chatApiUrl\n    }\n\n    const parseResult = utils.url.parse(api.url)\n    if (parseResult.status === 'error') {\n      return consts.defaultChatApiUrl\n    }\n\n    const { host, ...url } = parseResult.url\n    if (!host.startsWith('api.')) {\n      return consts.defaultChatApiUrl\n    }\n\n    const newHost = host.replace('api.', 'chat.')\n    return utils.url.format({ ...url, host: newHost })\n  }\n\n  private _selectBot = async (api: ApiClient): Promise<string> => {\n    const availableBots = await api\n      .listAllPages(api.client.listBots, (r) => r.bots)\n      .catch((thrown) => {\n        throw errors.BotpressCLIError.wrap(thrown, 'Could not fetch existing bots')\n      })\n\n    if (!availableBots.length) {\n      throw new errors.NoBotsFoundError()\n    }\n\n    const prompted = await this.prompt.select('Which bot do you want to deploy?', {\n      choices: availableBots.map((bot) => ({ title: bot.name, value: bot.id })),\n    })\n\n    if (!prompted) {\n      throw new errors.ParamRequiredError('Bot Id')\n    }\n\n    return prompted\n  }\n\n  private _installChatIntegration = async (api: ApiClient, botId: string): Promise<IntegrationInstance> => {\n    const line = this.logger.line()\n    line.started('Installing chat integration...')\n\n    const { integration } = await api.client.getPublicIntegration({\n      name: 'chat',\n      version: this._getChatApiTargetVersion(),\n    })\n\n    const { bot } = await api.client.updateBot({\n      id: botId,\n      integrations: {\n        [integration.id]: {\n          enabled: true,\n          configuration: {}, // empty object will always be a valid chat integration configuration\n        },\n      },\n    })\n\n    line.success('Chat integration installed')\n    line.commit()\n\n    return this._findChatInstance(bot)!\n  }\n\n  private _findChatInstance = (bot: client.Bot): IntegrationInstance | undefined => {\n    const integrationInstances = Object.entries(bot.integrations).map(([integrationId, integrationInstance]) => ({\n      id: integrationId,\n      instance: integrationInstance,\n    }))\n\n    const targetChatVersion = this._getChatApiTargetVersionRange()\n    return integrationInstances.find(\n      (i) => i.instance.name === 'chat' && semver.satisfies(i.instance.version, targetChatVersion)\n    )\n  }\n\n  private _getChatApiTargetVersionRange = (): string => {\n    const targetApiVersion = this._getChatApiTargetVersion()\n    const nextMajor = semver.inc(targetApiVersion, 'major')\n    return `>=${targetApiVersion} <${nextMajor}`\n  }\n\n  private _getChatApiTargetVersion = (): string => {\n    const dummyClient = new chat.Client({ apiUrl: '' })\n    return dummyClient.apiVersion\n  }\n}\n"],
  "mappings": "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",
  "names": ["client", "chat", "semver"]
}
