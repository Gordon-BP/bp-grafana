{
  "version": 3,
  "sources": ["../../src/command-implementations/plugin-commands.ts"],
  "sourcesContent": ["import type * as client from '@botpress/client'\nimport chalk from 'chalk'\nimport type commandDefinitions from '../command-definitions'\nimport * as errors from '../errors'\nimport { parsePackageRef } from '../package-ref'\nimport * as utils from '../utils'\nimport { GlobalCommand } from './global-command'\n\nexport type GetPluginCommandDefinition = typeof commandDefinitions.plugins.subcommands.get\nexport class GetPluginCommand extends GlobalCommand<GetPluginCommandDefinition> {\n  public async run(): Promise<void> {\n    const api = await this.ensureLoginAndCreateClient(this.argv)\n    const parsedRef = parsePackageRef(this.argv.pluginRef)\n    if (!parsedRef) {\n      throw new errors.InvalidPackageReferenceError(this.argv.pluginRef)\n    }\n    if (parsedRef.type === 'path') {\n      throw new errors.BotpressCLIError('Cannot get local plugin')\n    }\n\n    try {\n      const plugin = await api.findPublicPlugin(parsedRef)\n      if (plugin) {\n        this.logger.success(`Plugin ${chalk.bold(this.argv.pluginRef)}:`)\n        this.logger.json(utils.object.omit(plugin, 'code'))\n        return\n      }\n    } catch (thrown) {\n      throw errors.BotpressCLIError.wrap(thrown, `Could not get plugin ${this.argv.pluginRef}`)\n    }\n\n    throw new errors.BotpressCLIError(`Plugin ${this.argv.pluginRef} not found`)\n  }\n}\n\nexport type ListPluginsCommandDefinition = typeof commandDefinitions.plugins.subcommands.list\nexport class ListPluginsCommand extends GlobalCommand<ListPluginsCommandDefinition> {\n  public async run(): Promise<void> {\n    const api = await this.ensureLoginAndCreateClient(this.argv)\n\n    const lister = (req: { nextToken?: string }) => api.client.listPlugins({ nextToken: req.nextToken })\n\n    try {\n      const plugins = await api.listAllPages(lister, (r) => r.plugins)\n\n      this.logger.success('Plugins:')\n      this.logger.json(plugins)\n    } catch (thrown) {\n      throw errors.BotpressCLIError.wrap(thrown, 'Could not list plugins')\n    }\n  }\n}\n\nexport type DeletePluginCommandDefinition = typeof commandDefinitions.plugins.subcommands.delete\nexport class DeletePluginCommand extends GlobalCommand<DeletePluginCommandDefinition> {\n  public async run(): Promise<void> {\n    const api = await this.ensureLoginAndCreateClient(this.argv)\n    const parsedRef = parsePackageRef(this.argv.pluginRef)\n    if (!parsedRef) {\n      throw new errors.InvalidPackageReferenceError(this.argv.pluginRef)\n    }\n    if (parsedRef.type === 'path') {\n      throw new errors.BotpressCLIError('Cannot delete local plugin')\n    }\n\n    let plugin: client.Plugin | undefined\n    try {\n      plugin = await api.findPublicPlugin(parsedRef)\n    } catch (thrown) {\n      throw errors.BotpressCLIError.wrap(thrown, `Could not get plugin ${this.argv.pluginRef}`)\n    }\n\n    if (!plugin) {\n      throw new errors.BotpressCLIError(`Plugin ${this.argv.pluginRef} not found`)\n    }\n\n    try {\n      await api.client.deletePlugin({ id: plugin.id })\n    } catch (thrown) {\n      throw errors.BotpressCLIError.wrap(thrown, `Could not delete plugin ${this.argv.pluginRef}`)\n    }\n\n    this.logger.success(`Plugin ${chalk.bold(this.argv.pluginRef)} deleted`)\n    return\n  }\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA,mBAAkB;AAElB,aAAwB;AACxB,yBAAgC;AAChC,YAAuB;AACvB,4BAA8B;AAGvB,MAAM,yBAAyB,oCAA0C;AAAA,EAC9E,MAAa,MAAqB;AAChC,UAAM,MAAM,MAAM,KAAK,2BAA2B,KAAK,IAAI;AAC3D,UAAM,gBAAY,oCAAgB,KAAK,KAAK,SAAS;AACrD,QAAI,CAAC,WAAW;AACd,YAAM,IAAI,OAAO,6BAA6B,KAAK,KAAK,SAAS;AAAA,IACnE;AACA,QAAI,UAAU,SAAS,QAAQ;AAC7B,YAAM,IAAI,OAAO,iBAAiB,yBAAyB;AAAA,IAC7D;AAEA,QAAI;AACF,YAAM,SAAS,MAAM,IAAI,iBAAiB,SAAS;AACnD,UAAI,QAAQ;AACV,aAAK,OAAO,QAAQ,UAAU,aAAAA,QAAM,KAAK,KAAK,KAAK,SAAS,IAAI;AAChE,aAAK,OAAO,KAAK,MAAM,OAAO,KAAK,QAAQ,MAAM,CAAC;AAClD;AAAA,MACF;AAAA,IACF,SAAS,QAAP;AACA,YAAM,OAAO,iBAAiB,KAAK,QAAQ,wBAAwB,KAAK,KAAK,WAAW;AAAA,IAC1F;AAEA,UAAM,IAAI,OAAO,iBAAiB,UAAU,KAAK,KAAK,qBAAqB;AAAA,EAC7E;AACF;AAGO,MAAM,2BAA2B,oCAA4C;AAAA,EAClF,MAAa,MAAqB;AAChC,UAAM,MAAM,MAAM,KAAK,2BAA2B,KAAK,IAAI;AAE3D,UAAM,SAAS,CAAC,QAAgC,IAAI,OAAO,YAAY,EAAE,WAAW,IAAI,UAAU,CAAC;AAEnG,QAAI;AACF,YAAM,UAAU,MAAM,IAAI,aAAa,QAAQ,CAAC,MAAM,EAAE,OAAO;AAE/D,WAAK,OAAO,QAAQ,UAAU;AAC9B,WAAK,OAAO,KAAK,OAAO;AAAA,IAC1B,SAAS,QAAP;AACA,YAAM,OAAO,iBAAiB,KAAK,QAAQ,wBAAwB;AAAA,IACrE;AAAA,EACF;AACF;AAGO,MAAM,4BAA4B,oCAA6C;AAAA,EACpF,MAAa,MAAqB;AAChC,UAAM,MAAM,MAAM,KAAK,2BAA2B,KAAK,IAAI;AAC3D,UAAM,gBAAY,oCAAgB,KAAK,KAAK,SAAS;AACrD,QAAI,CAAC,WAAW;AACd,YAAM,IAAI,OAAO,6BAA6B,KAAK,KAAK,SAAS;AAAA,IACnE;AACA,QAAI,UAAU,SAAS,QAAQ;AAC7B,YAAM,IAAI,OAAO,iBAAiB,4BAA4B;AAAA,IAChE;AAEA,QAAI;AACJ,QAAI;AACF,eAAS,MAAM,IAAI,iBAAiB,SAAS;AAAA,IAC/C,SAAS,QAAP;AACA,YAAM,OAAO,iBAAiB,KAAK,QAAQ,wBAAwB,KAAK,KAAK,WAAW;AAAA,IAC1F;AAEA,QAAI,CAAC,QAAQ;AACX,YAAM,IAAI,OAAO,iBAAiB,UAAU,KAAK,KAAK,qBAAqB;AAAA,IAC7E;AAEA,QAAI;AACF,YAAM,IAAI,OAAO,aAAa,EAAE,IAAI,OAAO,GAAG,CAAC;AAAA,IACjD,SAAS,QAAP;AACA,YAAM,OAAO,iBAAiB,KAAK,QAAQ,2BAA2B,KAAK,KAAK,WAAW;AAAA,IAC7F;AAEA,SAAK,OAAO,QAAQ,UAAU,aAAAA,QAAM,KAAK,KAAK,KAAK,SAAS,WAAW;AACvE;AAAA,EACF;AACF;",
  "names": ["chalk"]
}
