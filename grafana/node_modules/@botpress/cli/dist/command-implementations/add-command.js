"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var add_command_exports = {};
__export(add_command_exports, {
  AddCommand: () => AddCommand
});
module.exports = __toCommonJS(add_command_exports);
var sdk = __toESM(require("@botpress/sdk"));
var fslib = __toESM(require("fs"));
var pathlib = __toESM(require("path"));
var import_api = require("../api");
var codegen = __toESM(require("../code-generation"));
var consts = __toESM(require("../consts"));
var errors = __toESM(require("../errors"));
var pkgRef = __toESM(require("../package-ref"));
var utils = __toESM(require("../utils"));
var import_global_command = require("./global-command");
var import_project_command = require("./project-command");
class AddCommand extends import_global_command.GlobalCommand {
  async run() {
    const ref = this._parseArgvRef();
    if (ref) {
      return await this._addSinglePackage(ref);
    }
    const pkgJson = await utils.pkgJson.readPackageJson(this.argv.installPath);
    if (!pkgJson) {
      this.logger.warn("No package.json found in the install path");
      return;
    }
    const { bpDependencies } = pkgJson;
    if (!bpDependencies) {
      this.logger.log("No bp dependencies found in package.json");
      return;
    }
    const bpDependenciesSchema = sdk.z.record(sdk.z.string());
    const parseResults = bpDependenciesSchema.safeParse(bpDependencies);
    if (!parseResults.success) {
      throw new errors.BotpressCLIError("Invalid bpDependencies found in package.json");
    }
    for (const [pkgAlias, pkgRefStr] of Object.entries(parseResults.data)) {
      const parsed = pkgRef.parsePackageRef(pkgRefStr);
      if (!parsed) {
        throw new errors.InvalidPackageReferenceError(pkgRefStr);
      }
      await this._addSinglePackage({ ...parsed, alias: pkgAlias });
    }
  }
  _parseArgvRef = () => {
    if (!this.argv.packageRef) {
      return;
    }
    const parsed = pkgRef.parsePackageRef(this.argv.packageRef);
    if (!parsed) {
      throw new errors.InvalidPackageReferenceError(this.argv.packageRef);
    }
    if (parsed.type !== "name") {
      return parsed;
    }
    const argvPkgType = this.argv.packageType;
    if (!argvPkgType) {
      return parsed;
    }
    const ref = { ...parsed, pkg: argvPkgType };
    const strRef = pkgRef.formatPackageRef(ref);
    this.logger.warn(`argument --packageType is deprecated; please use the package reference format "${strRef}"`);
    return ref;
  };
  async _addSinglePackage(ref) {
    const targetPackage = ref.type === "path" ? await this._findLocalPackage(ref) : await this._findRemotePackage(ref);
    if (!targetPackage) {
      const strRef = pkgRef.formatPackageRef(ref);
      throw new errors.BotpressCLIError(`Could not find package "${strRef}"`);
    }
    const packageName = ref.alias ?? targetPackage.pkg.name;
    const baseInstallPath = utils.path.absoluteFrom(utils.path.cwd(), this.argv.installPath);
    const packageDirName = utils.casing.to.kebabCase(packageName);
    const installPath = utils.path.join(baseInstallPath, consts.installDirName, packageDirName);
    const alreadyInstalled = fslib.existsSync(installPath);
    if (alreadyInstalled) {
      this.logger.warn(`Package with name "${packageName}" already installed.`);
      const res = await this.prompt.confirm("Do you want to overwrite the existing package?");
      if (!res) {
        this.logger.log("Aborted");
        return;
      }
      await this._uninstall(installPath);
    }
    let files;
    if (targetPackage.type === "integration") {
      files = await codegen.generateIntegrationPackage(targetPackage.pkg);
    } else if (targetPackage.type === "interface") {
      files = await codegen.generateInterfacePackage(targetPackage.pkg);
    } else if (targetPackage.type === "plugin") {
      files = await codegen.generatePluginPackage(targetPackage.pkg);
    } else {
      throw new errors.BotpressCLIError("Invalid package type");
    }
    await this._install(installPath, files);
  }
  async _findRemotePackage(ref) {
    const api = await this.ensureLoginAndCreateClient(this.argv);
    if (this._pkgCouldBe(ref, "integration")) {
      const integration = await api.findIntegration(ref);
      if (integration) {
        const { name, version } = integration;
        return { type: "integration", pkg: { source: "remote", integration, name, version } };
      }
    }
    if (this._pkgCouldBe(ref, "interface")) {
      const intrface = await api.findPublicInterface(ref);
      if (intrface) {
        const { name, version } = intrface;
        return { type: "interface", pkg: { source: "remote", interface: intrface, name, version } };
      }
    }
    if (this._pkgCouldBe(ref, "plugin")) {
      const plugin = await api.findPublicPlugin(ref);
      if (plugin) {
        const { name, version } = plugin;
        return { type: "plugin", pkg: { source: "remote", plugin, name, version } };
      }
    }
    return;
  }
  async _findLocalPackage(ref) {
    const absPath = utils.path.absoluteFrom(utils.path.cwd(), ref.path);
    const {
      definition: projectDefinition,
      implementation: projectImplementation,
      devId: projectDevId
    } = await this._readProject(absPath);
    if (projectDefinition?.type === "integration") {
      const { name, version } = projectDefinition.definition;
      let devId;
      if (this.argv.useDev && projectDevId) {
        this.logger.warn(`Installing integration "${name}" with dev version "${projectDevId}"`);
        devId = projectDevId;
      }
      return {
        type: "integration",
        pkg: { source: "local", path: absPath, devId, name, version }
      };
    }
    if (projectDefinition?.type === "interface") {
      const { name, version } = projectDefinition.definition;
      return {
        type: "interface",
        pkg: { source: "local", path: absPath, name, version }
      };
    }
    if (projectDefinition?.type === "plugin") {
      if (!projectImplementation) {
        throw new errors.BotpressCLIError(
          "Plugin implementation not found; Please build the plugin project before installing"
        );
      }
      const { name, version } = projectDefinition.definition;
      return {
        type: "plugin",
        pkg: {
          source: "local",
          path: absPath,
          implementationCode: projectImplementation,
          name,
          version
        }
      };
    }
    if (projectDefinition?.type === "bot") {
      throw new errors.BotpressCLIError("Cannot install a bot as a package");
    }
    return;
  }
  async _install(installPath, files) {
    const line = this.logger.line();
    line.started(`Installing ${files.length} files to "${installPath}"`);
    try {
      for (const file of files) {
        const filePath = utils.path.absoluteFrom(installPath, file.path);
        const dirPath = pathlib.dirname(filePath);
        await fslib.promises.mkdir(dirPath, { recursive: true });
        await fslib.promises.writeFile(filePath, file.content);
      }
      line.success(`Installed ${files.length} files to "${installPath}"`);
    } finally {
      line.commit();
    }
  }
  async _uninstall(installPath) {
    await fslib.promises.rm(installPath, { recursive: true });
  }
  async _readProject(workDir) {
    class AnyProjectCommand extends import_project_command.ProjectCommand {
      async run() {
        throw new errors.BotpressCLIError("Not implemented");
      }
      async readProjectDefinitionFromFS() {
        return super.readProjectDefinitionFromFS();
      }
      get projectCache() {
        return super.projectCache;
      }
    }
    const cmd = new AnyProjectCommand(import_api.ApiClient, this.prompt, this.logger, {
      ...this.argv,
      workDir
    });
    const definition = await cmd.readProjectDefinitionFromFS().catch((thrown) => {
      if (thrown instanceof errors.ProjectDefinitionNotFoundError) {
        return void 0;
      }
      throw thrown;
    });
    const devId = await cmd.projectCache.get("devId");
    const implementationAbsPath = utils.path.join(workDir, consts.fromWorkDir.outFile);
    if (!fslib.existsSync(implementationAbsPath)) {
      return { definition, devId };
    }
    const implementation = await fslib.promises.readFile(implementationAbsPath, "utf8");
    return { definition, implementation, devId };
  }
  _pkgCouldBe = (ref, pkgType) => {
    if (ref.type === "id") {
      return true;
    }
    if (!ref.pkg) {
      return true;
    }
    return ref.pkg === pkgType;
  };
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  AddCommand
});
//# sourceMappingURL=add-command.js.map
