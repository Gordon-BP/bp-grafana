{
  "version": 3,
  "sources": ["../../src/chat/index.ts"],
  "sourcesContent": ["import * as chat from '@botpress/chat'\nimport * as chalk from 'chalk'\nimport * as readline from 'readline'\nimport * as uuid from 'uuid'\nimport * as utils from '../utils'\n\ntype MessageSource = 'myself' | 'bot' | 'other'\ntype ChatMessage = chat.Message & { source: MessageSource }\ntype ChatState =\n  | {\n      status: 'stopped'\n    }\n  | {\n      status: 'running'\n      messages: ChatMessage[]\n      connection: chat.SignalListener\n      keyboard: readline.Interface\n    }\n\nconst USER_ICONS: Record<MessageSource, string> = {\n  myself: '\uD83D\uDC64',\n  bot: '\uD83E\uDD16',\n  other: '\uD83D\uDC65',\n}\n\nconst MESSAGE_ICONS: Record<chat.Message['payload']['type'], string> = {\n  audio: '\uD83C\uDFB5',\n  card: '\uD83C\uDCCF',\n  carousel: '\uD83C\uDFA0',\n  choice: '\uD83D\uDD3D',\n  dropdown: '\uD83D\uDD3D',\n  file: '\uD83D\uDCC1',\n  image: '\uD83C\uDF05',\n  location: '\uD83D\uDCCD',\n  text: '',\n  video: '\uD83C\uDFA5',\n  markdown: '',\n}\n\nconst EXIT_KEYWORDS = ['exit', '.exit']\n\nexport type ChatProps = {\n  client: chat.AuthenticatedClient\n  conversationId: string\n}\n\nexport class Chat {\n  private _events = new utils.emitter.EventEmitter<{ state: ChatState }>()\n  private _state: ChatState = { status: 'stopped' }\n\n  public static launch(props: ChatProps): Chat {\n    const instance = new Chat(props)\n    void instance._run()\n    return instance\n  }\n\n  private constructor(private _props: ChatProps) {}\n\n  private async _run() {\n    this._switchAlternateScreenBuffer()\n    this._events.on('state', this._renderMessages)\n\n    const connection = await this._props.client.listenConversation({ id: this._props.conversationId })\n    const keyboard = readline.createInterface({\n      input: process.stdin,\n      output: process.stdout,\n    })\n\n    connection.on('message_created', (m) => void this._onMessageReceived(m))\n    keyboard.on('line', (l) => void this._onKeyboardInput(l))\n    process.stdin.on('keypress', (_, key) => {\n      if (key.name === 'escape') {\n        void this._onExit()\n      }\n    })\n\n    this._setState({ status: 'running', messages: [], connection, keyboard })\n  }\n\n  private _setState = (newState: ChatState) => {\n    this._state = newState\n    this._events.emit('state', this._state)\n  }\n\n  private _onMessageReceived = async (message: chat.Signals['message_created']) => {\n    if (this._state.status === 'stopped') {\n      return\n    }\n    if (message.userId === this._props.client.user.id) {\n      return\n    }\n    const source: MessageSource = message.isBot ? 'bot' : 'other'\n    this._setState({ ...this._state, messages: [...this._state.messages, { ...message, source }] })\n  }\n\n  private _onKeyboardInput = async (line: string) => {\n    if (this._state.status === 'stopped') {\n      return\n    }\n\n    if (EXIT_KEYWORDS.includes(line)) {\n      await this._onExit()\n      return\n    }\n\n    if (!line) {\n      this._setState({ ...this._state })\n      return\n    }\n\n    const message = this._textToMessage(line)\n    this._setState({ ...this._state, messages: [...this._state.messages, message] })\n    await this._props.client.createMessage(message)\n  }\n\n  private _onExit = async () => {\n    if (this._state.status === 'stopped') {\n      return\n    }\n    const { connection, keyboard } = this._state\n    await connection.disconnect()\n    connection.cleanup()\n    keyboard.close()\n    this._setState({ status: 'stopped' })\n    this._clearStdOut()\n    this._restoreOriginalScreenBuffer()\n  }\n\n  public wait(): Promise<void> {\n    return new Promise<void>((resolve) => {\n      const cb = (state: ChatState) => {\n        if (state.status === 'stopped') {\n          this._events.off('state', cb)\n          resolve()\n        }\n      }\n      this._events.on('state', cb)\n    })\n  }\n\n  private _renderMessages = () => {\n    if (this._state.status === 'stopped') {\n      return\n    }\n\n    this._clearStdOut()\n    this._printHeader()\n\n    for (const message of this._state.messages) {\n      const prefix = USER_ICONS[message.source]\n      const text = this._messageToText(message)\n      const coloredText = message.source === 'bot' ? text : chalk.gray(text)\n      process.stdout.write(`${prefix} ${coloredText}\\n`)\n    }\n\n    this._state.keyboard.setPrompt('>> ')\n    this._state.keyboard.prompt(true) // Redisplay the prompt and maintain current input\n  }\n\n  private _printHeader = () => {\n    process.stdout.write(chalk.bold('Botpress Chat\\n'))\n    process.stdout.write(chalk.gray('Type \"exit\" or press ESC key to quit\\n'))\n  }\n\n  private _switchAlternateScreenBuffer = () => {\n    process.stdout.write('\\x1B[?1049h')\n  }\n\n  private _restoreOriginalScreenBuffer = () => {\n    process.stdout.write('\\x1B[?1049l')\n  }\n\n  private _clearStdOut = () => {\n    process.stdout.write('\\x1B[2J\\x1B[0;0H')\n  }\n\n  private _messageToText = (message: chat.Message): string => {\n    const prefix = MESSAGE_ICONS[message.payload.type]\n    switch (message.payload.type) {\n      case 'audio':\n        return prefix + message.payload.audioUrl\n      case 'card':\n        return prefix + JSON.stringify(message.payload)\n      case 'carousel':\n        return prefix + JSON.stringify(message.payload)\n      case 'choice':\n        return (\n          prefix +\n          [message.payload.text, ...message.payload.options.map((o) => `  - ${o.label} (${o.value})`)].join('\\n')\n        )\n      case 'dropdown':\n        return (\n          prefix +\n          [message.payload.text, ...message.payload.options.map((o) => `  - ${o.label} (${o.value})`)].join('\\n')\n        )\n      case 'file':\n        return prefix + message.payload.fileUrl\n      case 'image':\n        return prefix + message.payload.imageUrl\n      case 'location':\n        return prefix + `${message.payload.latitude},${message.payload.longitude} (${message.payload.address})`\n      case 'text':\n        return prefix + message.payload.text\n      case 'video':\n        return prefix + message.payload.videoUrl\n      case 'markdown':\n        return prefix + message.payload.markdown\n      default:\n        type _assertion = utils.types.AssertNever<typeof message.payload>\n        return '<unknown>'\n    }\n  }\n\n  private _textToMessage = (text: string): ChatMessage => {\n    return {\n      id: uuid.v4(),\n      userId: this._props.client.user.id,\n      source: 'myself',\n      conversationId: this._props.conversationId,\n      createdAt: new Date().toISOString(),\n      payload: { type: 'text', text },\n    }\n  }\n}\n"],
  "mappings": "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",
  "names": []
}
