{
  "version": 3,
  "sources": ["../../../src/linter/ruleset-tests/interface.ruleset.test.ts"],
  "sourcesContent": ["import { test, expect } from 'vitest'\nimport { INTERFACE_RULESET } from '../rulesets/interface.ruleset'\nimport { createDescribeRule, type RecursivePartial } from './common'\nimport { type CreateInterfaceBody } from '../../api/interface-body'\n\ntype PartialInterface = RecursivePartial<CreateInterfaceBody>\nconst describeRule = createDescribeRule<CreateInterfaceBody>()(INTERFACE_RULESET)\n\nconst EMPTY_STRING = ''\nconst TRUTHY_STRING = 'truthy'\nconst ACTION_NAME = 'actionName'\nconst EVENT_NAME = 'eventName'\nconst PARAM_NAME = 'paramName'\nconst PROPERTIES_PARAM = 'properties'\nconst PARAM_NAMES = [PARAM_NAME, PROPERTIES_PARAM] as const\nconst CHANNEL_NAME = 'channelName'\nconst ENTITY_NAME = 'entityName'\nconst MESSAGE_TYPE = 'text'\nconst ZUI = 'x-zui'\nconst LEGACY_ZUI = 'ui'\n\ndescribeRule('action-inputparams-should-have-a-title', (lint) => {\n  test.each(PARAM_NAMES)('missing title should trigger (%s)', async (paramName) => {\n    // arrange\n    const definition = {\n      actions: { [ACTION_NAME]: { input: { schema: { properties: { [paramName]: { [ZUI]: {} } } } } } },\n    } as const satisfies PartialInterface\n\n    // act\n    const results = await lint(definition)\n\n    // assert\n    expect(results).toHaveLength(1)\n    expect(results[0]?.path).toEqual(['actions', ACTION_NAME, 'input', 'schema', 'properties', paramName, ZUI])\n    expect(results[0]?.message).toContain('title')\n  })\n\n  test.each(PARAM_NAMES)('empty title should trigger (%s)', async (paramName) => {\n    // arrange\n    const definition = {\n      actions: {\n        [ACTION_NAME]: { input: { schema: { properties: { [paramName]: { [ZUI]: { title: EMPTY_STRING } } } } } },\n      },\n    } as const satisfies PartialInterface\n\n    // act\n    const results = await lint(definition)\n\n    // assert\n    expect(results).toHaveLength(1)\n    expect(results[0]?.path).toEqual(['actions', ACTION_NAME, 'input', 'schema', 'properties', paramName, ZUI, 'title'])\n    expect(results[0]?.message).toContain('title')\n  })\n\n  test.each(PARAM_NAMES)('valid title should not trigger (%s)', async (paramName) => {\n    // arrange\n    const definition = {\n      actions: {\n        [ACTION_NAME]: { input: { schema: { properties: { [paramName]: { [ZUI]: { title: TRUTHY_STRING } } } } } },\n      },\n    } as const satisfies PartialInterface\n\n    // act\n    const results = await lint(definition)\n\n    // assert\n    expect(results).toHaveLength(0)\n  })\n})\n\ndescribeRule('action-inputparams-must-have-a-description', (lint) => {\n  test.each(PARAM_NAMES)('missing description should trigger (%s)', async (paramName) => {\n    // arrange\n    const definition = {\n      actions: { [ACTION_NAME]: { input: { schema: { properties: { [paramName]: {} } } } } },\n    } as const satisfies PartialInterface\n\n    // act\n    const results = await lint(definition)\n\n    // assert\n    expect(results).toHaveLength(1)\n    expect(results[0]?.path).toEqual(['actions', ACTION_NAME, 'input', 'schema', 'properties', paramName])\n    expect(results[0]?.message).toContain('description')\n  })\n\n  test.each(PARAM_NAMES)('empty description should trigger (%s)', async (paramName) => {\n    // arrange\n    const definition = {\n      actions: {\n        [ACTION_NAME]: { input: { schema: { properties: { [paramName]: { description: EMPTY_STRING } } } } },\n      },\n    } as const satisfies PartialInterface\n\n    // act\n    const results = await lint(definition)\n\n    // assert\n    expect(results).toHaveLength(1)\n    expect(results[0]?.path).toEqual([\n      'actions',\n      ACTION_NAME,\n      'input',\n      'schema',\n      'properties',\n      paramName,\n      'description',\n    ])\n    expect(results[0]?.message).toContain('description')\n  })\n\n  test.each(PARAM_NAMES)('valid description should not trigger (%s)', async (paramName) => {\n    // arrange\n    const definition = {\n      actions: {\n        [ACTION_NAME]: { input: { schema: { properties: { [paramName]: { description: TRUTHY_STRING } } } } },\n      },\n    } as const satisfies PartialInterface\n\n    // act\n    const results = await lint(definition)\n\n    // assert\n    expect(results).toHaveLength(0)\n  })\n})\n\ndescribeRule('action-outputparams-should-have-a-title', (lint) => {\n  test.each(PARAM_NAMES)('missing title should trigger (%s)', async (paramName) => {\n    // arrange\n    const definition = {\n      actions: { [ACTION_NAME]: { output: { schema: { properties: { [paramName]: { [ZUI]: {} } } } } } },\n    } as const satisfies PartialInterface\n\n    // act\n    const results = await lint(definition)\n\n    // assert\n    expect(results).toHaveLength(1)\n    expect(results[0]?.path).toEqual(['actions', ACTION_NAME, 'output', 'schema', 'properties', paramName, ZUI])\n    expect(results[0]?.message).toContain('title')\n  })\n\n  test.each(PARAM_NAMES)('empty title should trigger (%s)', async (paramName) => {\n    // arrange\n    const definition = {\n      actions: {\n        [ACTION_NAME]: { output: { schema: { properties: { [paramName]: { [ZUI]: { title: EMPTY_STRING } } } } } },\n      },\n    } as const satisfies PartialInterface\n\n    // act\n    const results = await lint(definition)\n\n    // assert\n    expect(results).toHaveLength(1)\n    expect(results[0]?.path).toEqual([\n      'actions',\n      ACTION_NAME,\n      'output',\n      'schema',\n      'properties',\n      paramName,\n      ZUI,\n      'title',\n    ])\n    expect(results[0]?.message).toContain('title')\n  })\n\n  test.each(PARAM_NAMES)('valid title should not trigger (%s)', async (paramName) => {\n    // arrange\n    const definition = {\n      actions: {\n        [ACTION_NAME]: { output: { schema: { properties: { [paramName]: { [ZUI]: { title: TRUTHY_STRING } } } } } },\n      },\n    } as const satisfies PartialInterface\n\n    // act\n    const results = await lint(definition)\n\n    // assert\n    expect(results).toHaveLength(0)\n  })\n})\n\ndescribeRule('action-outputparams-must-have-a-description', (lint) => {\n  test.each(PARAM_NAMES)('missing description should trigger (%s)', async (paramName) => {\n    // arrange\n    const definition = {\n      actions: { [ACTION_NAME]: { output: { schema: { properties: { [paramName]: {} } } } } },\n    } as const satisfies PartialInterface\n\n    // act\n    const results = await lint(definition)\n\n    // assert\n    expect(results).toHaveLength(1)\n    expect(results[0]?.path).toEqual(['actions', ACTION_NAME, 'output', 'schema', 'properties', paramName])\n    expect(results[0]?.message).toContain('description')\n  })\n\n  test.each(PARAM_NAMES)('empty description should trigger (%s)', async (paramName) => {\n    // arrange\n    const definition = {\n      actions: {\n        [ACTION_NAME]: { output: { schema: { properties: { [paramName]: { description: EMPTY_STRING } } } } },\n      },\n    } as const satisfies PartialInterface\n\n    // act\n    const results = await lint(definition)\n\n    // assert\n    expect(results).toHaveLength(1)\n    expect(results[0]?.path).toEqual([\n      'actions',\n      ACTION_NAME,\n      'output',\n      'schema',\n      'properties',\n      paramName,\n      'description',\n    ])\n    expect(results[0]?.message).toContain('description')\n  })\n\n  test.each(PARAM_NAMES)('valid description should not trigger (%s)', async (paramName) => {\n    // arrange\n    const definition = {\n      actions: {\n        [ACTION_NAME]: { output: { schema: { properties: { [paramName]: { description: TRUTHY_STRING } } } } },\n      },\n    } as const satisfies PartialInterface\n\n    // act\n    const results = await lint(definition)\n\n    // assert\n    expect(results).toHaveLength(0)\n  })\n})\n\ndescribeRule('event-outputparams-should-have-title', (lint) => {\n  test.each(PARAM_NAMES)('missing title should trigger (%s)', async (paramName) => {\n    // arrange\n    const definition = {\n      events: { [EVENT_NAME]: { schema: { properties: { [paramName]: { [ZUI]: {} } } } } },\n    } as const satisfies PartialInterface\n\n    // act\n    const results = await lint(definition)\n\n    // assert\n    expect(results).toHaveLength(1)\n    expect(results[0]?.path).toEqual(['events', EVENT_NAME, 'schema', 'properties', paramName, ZUI])\n    expect(results[0]?.message).toContain('title')\n  })\n\n  test.each(PARAM_NAMES)('empty title should trigger (%s)', async (paramName) => {\n    // arrange\n    const definition = {\n      events: {\n        [EVENT_NAME]: { schema: { properties: { [paramName]: { [ZUI]: { title: EMPTY_STRING } } } } },\n      },\n    } as const satisfies PartialInterface\n\n    // act\n    const results = await lint(definition)\n\n    // assert\n    expect(results).toHaveLength(1)\n    expect(results[0]?.path).toEqual(['events', EVENT_NAME, 'schema', 'properties', paramName, ZUI, 'title'])\n    expect(results[0]?.message).toContain('title')\n  })\n\n  test.each(PARAM_NAMES)('valid title should not trigger (%s)', async (paramName) => {\n    // arrange\n    const definition = {\n      events: {\n        [EVENT_NAME]: { schema: { properties: { [paramName]: { [ZUI]: { title: TRUTHY_STRING } } } } },\n      },\n    } as const satisfies PartialInterface\n\n    // act\n    const results = await lint(definition)\n\n    // assert\n    expect(results).toHaveLength(0)\n  })\n})\n\ndescribeRule('event-outputparams-must-have-description', (lint) => {\n  test.each(PARAM_NAMES)('missing description should trigger (%s)', async (paramName) => {\n    // arrange\n    const definition = {\n      events: { [EVENT_NAME]: { schema: { properties: { [paramName]: {} } } } },\n    } as const satisfies PartialInterface\n\n    // act\n    const results = await lint(definition)\n\n    // assert\n    expect(results).toHaveLength(1)\n    expect(results[0]?.path).toEqual(['events', EVENT_NAME, 'schema', 'properties', paramName])\n    expect(results[0]?.message).toContain('description')\n  })\n\n  test.each(PARAM_NAMES)('empty description should trigger (%s)', async (paramName) => {\n    // arrange\n    const definition = {\n      events: {\n        [EVENT_NAME]: { schema: { properties: { [paramName]: { description: EMPTY_STRING } } } },\n      },\n    } as const satisfies PartialInterface\n\n    // act\n    const results = await lint(definition)\n\n    // assert\n    expect(results).toHaveLength(1)\n    expect(results[0]?.path).toEqual(['events', EVENT_NAME, 'schema', 'properties', paramName, 'description'])\n    expect(results[0]?.message).toContain('description')\n  })\n\n  test.each(PARAM_NAMES)('valid description should not trigger (%s)', async (paramName) => {\n    // arrange\n    const definition = {\n      events: {\n        [EVENT_NAME]: { schema: { properties: { [paramName]: { description: TRUTHY_STRING } } } },\n      },\n    } as const satisfies PartialInterface\n\n    // act\n    const results = await lint(definition)\n\n    // assert\n    expect(results).toHaveLength(0)\n  })\n})\n\ndescribeRule('legacy-zui-title-should-be-removed', (lint) => {\n  test.each(PARAM_NAMES)('legacy zui title should trigger (%s)', async (paramName) => {\n    // arrange\n    const definition = {\n      actions: {\n        [ACTION_NAME]: { input: { [LEGACY_ZUI]: { [paramName]: { title: TRUTHY_STRING } }, schema: {} } },\n      },\n      events: { [EVENT_NAME]: { [LEGACY_ZUI]: { [paramName]: { title: TRUTHY_STRING } }, schema: {} } },\n      channels: {\n        [CHANNEL_NAME]: {\n          messages: { [MESSAGE_TYPE]: { [LEGACY_ZUI]: { [paramName]: { title: TRUTHY_STRING } }, schema: {} } },\n        },\n      },\n      entities: { [ENTITY_NAME]: { [LEGACY_ZUI]: { [paramName]: { title: TRUTHY_STRING } }, schema: {} } },\n    } as const satisfies PartialInterface\n\n    // act\n    const results = await lint(definition)\n\n    // assert\n    expect(results).toHaveLength(4)\n    expect(results[0]?.message).toContain('.title()')\n  })\n})\n\ndescribeRule('legacy-zui-examples-should-be-removed', (lint) => {\n  test.each(PARAM_NAMES)('legacy zui examples should trigger (%s)', async (paramName) => {\n    // arrange\n    const definition = {\n      actions: {\n        [ACTION_NAME]: { input: { [LEGACY_ZUI]: { [paramName]: { examples: [TRUTHY_STRING] } }, schema: {} } },\n      },\n      events: { [EVENT_NAME]: { [LEGACY_ZUI]: { [paramName]: { examples: [TRUTHY_STRING] } }, schema: {} } },\n      channels: {\n        [CHANNEL_NAME]: {\n          messages: { [MESSAGE_TYPE]: { [LEGACY_ZUI]: { [paramName]: { examples: [TRUTHY_STRING] } }, schema: {} } },\n        },\n      },\n      entities: { [ENTITY_NAME]: { [LEGACY_ZUI]: { [paramName]: { examples: [TRUTHY_STRING] } }, schema: {} } },\n    } as const satisfies PartialInterface\n\n    // act\n    const results = await lint(definition)\n\n    // assert\n    expect(results).toHaveLength(4)\n    expect(results[0]?.message).toContain('examples')\n  })\n})\n\ndescribeRule('entities-should-have-a-title', (lint) => {\n  test('missing title should trigger', async () => {\n    // arrange\n    const definition = {\n      entities: { [ENTITY_NAME]: {} },\n    } as const satisfies PartialInterface\n\n    // act\n    const results = await lint(definition)\n\n    // assert\n    expect(results).toHaveLength(1)\n    expect(results[0]?.path).toEqual(['entities', ENTITY_NAME])\n    expect(results[0]?.message).toContain('title')\n  })\n\n  test('empty title should trigger', async () => {\n    // arrange\n    const definition = {\n      entities: { [ENTITY_NAME]: { title: EMPTY_STRING } },\n    } as const satisfies PartialInterface\n\n    // act\n    const results = await lint(definition)\n\n    // assert\n    expect(results).toHaveLength(1)\n    expect(results[0]?.path).toEqual(['entities', ENTITY_NAME, 'title'])\n    expect(results[0]?.message).toContain('title')\n  })\n\n  test('valid title should not trigger', async () => {\n    // arrange\n    const definition = {\n      entities: { [ENTITY_NAME]: { title: TRUTHY_STRING } },\n    } as const satisfies PartialInterface\n\n    // act\n    const results = await lint(definition)\n\n    // assert\n    expect(results).toHaveLength(0)\n  })\n})\n\ndescribeRule('entities-must-have-a-description', (lint) => {\n  test('missing description should trigger', async () => {\n    // arrange\n    const definition = {\n      entities: { [ENTITY_NAME]: {} },\n    } as const satisfies PartialInterface\n\n    // act\n    const results = await lint(definition)\n\n    // assert\n    expect(results).toHaveLength(1)\n    expect(results[0]?.path).toEqual(['entities', ENTITY_NAME])\n    expect(results[0]?.message).toContain('description')\n  })\n\n  test('empty description should trigger', async () => {\n    // arrange\n    const definition = {\n      entities: { [ENTITY_NAME]: { description: EMPTY_STRING } },\n    } as const satisfies PartialInterface\n\n    // act\n    const results = await lint(definition)\n\n    // assert\n    expect(results).toHaveLength(1)\n    expect(results[0]?.path).toEqual(['entities', ENTITY_NAME, 'description'])\n    expect(results[0]?.message).toContain('description')\n  })\n\n  test('valid description should not trigger', async () => {\n    // arrange\n    const definition = {\n      entities: { [ENTITY_NAME]: { description: TRUTHY_STRING } },\n    } as const satisfies PartialInterface\n\n    // act\n    const results = await lint(definition)\n\n    // assert\n    expect(results).toHaveLength(0)\n  })\n})\n\ndescribeRule('entity-fields-should-have-a-title', (lint) => {\n  test.each(PARAM_NAMES)('missing title should trigger (%s)', async (paramName) => {\n    // arrange\n    const definition = {\n      entities: { [ENTITY_NAME]: { schema: { properties: { [paramName]: { [ZUI]: {} } } } } },\n    } as const satisfies PartialInterface\n\n    // act\n    const results = await lint(definition)\n\n    // assert\n    expect(results).toHaveLength(1)\n    expect(results[0]?.path).toEqual(['entities', ENTITY_NAME, 'schema', 'properties', paramName, ZUI])\n    expect(results[0]?.message).toContain('title')\n  })\n\n  test.each(PARAM_NAMES)('empty title should trigger (%s)', async (paramName) => {\n    // arrange\n    const definition = {\n      entities: {\n        [ENTITY_NAME]: { schema: { properties: { [paramName]: { [ZUI]: { title: EMPTY_STRING } } } } },\n      },\n    } as const satisfies PartialInterface\n\n    // act\n    const results = await lint(definition)\n\n    // assert\n    expect(results).toHaveLength(1)\n    expect(results[0]?.path).toEqual(['entities', ENTITY_NAME, 'schema', 'properties', paramName, ZUI, 'title'])\n    expect(results[0]?.message).toContain('title')\n  })\n\n  test.each(PARAM_NAMES)('valid title should not trigger (%s)', async (paramName) => {\n    // arrange\n    const definition = {\n      entities: {\n        [ENTITY_NAME]: { schema: { properties: { [paramName]: { [ZUI]: { title: TRUTHY_STRING } } } } },\n      },\n    } as const satisfies PartialInterface\n\n    // act\n    const results = await lint(definition)\n\n    // assert\n    expect(results).toHaveLength(0)\n  })\n})\n\ndescribeRule('entity-fields-must-have-a-description', (lint) => {\n  test.each(PARAM_NAMES)('missing description should trigger (%s)', async (paramName) => {\n    // arrange\n    const definition = {\n      entities: { [ENTITY_NAME]: { schema: { properties: { [paramName]: {} } } } },\n    } as const satisfies PartialInterface\n\n    // act\n    const results = await lint(definition)\n\n    // assert\n    expect(results).toHaveLength(1)\n    expect(results[0]?.path).toEqual(['entities', ENTITY_NAME, 'schema', 'properties', paramName])\n    expect(results[0]?.message).toContain('description')\n  })\n\n  test.each(PARAM_NAMES)('empty description should trigger (%s)', async (paramName) => {\n    // arrange\n    const definition = {\n      entities: {\n        [ENTITY_NAME]: { schema: { properties: { [paramName]: { description: EMPTY_STRING } } } },\n      },\n    } as const satisfies PartialInterface\n\n    // act\n    const results = await lint(definition)\n\n    // assert\n    expect(results).toHaveLength(1)\n    expect(results[0]?.path).toEqual(['entities', ENTITY_NAME, 'schema', 'properties', paramName, 'description'])\n    expect(results[0]?.message).toContain('description')\n  })\n\n  test.each(PARAM_NAMES)('valid description should not trigger (%s)', async (paramName) => {\n    // arrange\n    const definition = {\n      entities: {\n        [ENTITY_NAME]: { schema: { properties: { [paramName]: { description: TRUTHY_STRING } } } },\n      },\n    } as const satisfies PartialInterface\n\n    // act\n    const results = await lint(definition)\n\n    // assert\n    expect(results).toHaveLength(0)\n  })\n})\n"],
  "mappings": "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",
  "names": []
}
