{
  "version": 3,
  "sources": ["../../src/linter/base-linter.test.ts"],
  "sourcesContent": ["import { test, expect, describe, vi } from 'vitest'\nimport { prepareCreateIntegrationBody } from '../api/integration-body'\nimport { IntegrationLinter } from './integration-linter'\nimport { IntegrationDefinition, type IntegrationDefinitionProps, z } from '@botpress/sdk'\n\nconst EMPTY_STRING = ''\nconst TRUTHY_STRING = 'truthy'\nconst ACTION_NAME = 'actionName'\nconst EVENT_NAME = 'eventName'\nconst CONFIG_NAME = 'configName'\nconst PARAM_NAME = 'paramName'\nconst TAG_NAME = 'tagName'\nconst CHANNEL_NAME = 'channelName'\nconst STATE_NAME = 'stateName'\nconst MESSAGE_TYPE = 'text'\nconst SECRET_NAME = 'SECRET_NAME'\n\nconst VALID_INTEGRATION = {\n  name: TRUTHY_STRING,\n  title: TRUTHY_STRING,\n  description: TRUTHY_STRING,\n  version: TRUTHY_STRING,\n  readme: TRUTHY_STRING,\n  icon: TRUTHY_STRING,\n  actions: {\n    [ACTION_NAME]: {\n      title: TRUTHY_STRING,\n      description: TRUTHY_STRING,\n      input: {\n        schema: z\n          .object({\n            [PARAM_NAME]: z.string().title(TRUTHY_STRING).describe(TRUTHY_STRING),\n          })\n          .title(TRUTHY_STRING)\n          .describe(TRUTHY_STRING),\n      },\n      output: {\n        schema: z\n          .object({\n            [PARAM_NAME]: z.string().title(TRUTHY_STRING).describe(TRUTHY_STRING),\n          })\n          .title(TRUTHY_STRING)\n          .describe(TRUTHY_STRING),\n      },\n    },\n  },\n  events: {\n    [EVENT_NAME]: {\n      title: TRUTHY_STRING,\n      description: TRUTHY_STRING,\n      schema: z\n        .object({\n          [PARAM_NAME]: z.string().title(TRUTHY_STRING).describe(TRUTHY_STRING),\n        })\n        .title(TRUTHY_STRING)\n        .describe(TRUTHY_STRING),\n    },\n  },\n  configuration: {\n    schema: z\n      .object({\n        [PARAM_NAME]: z.string().title(TRUTHY_STRING).describe(TRUTHY_STRING),\n      })\n      .title(TRUTHY_STRING)\n      .describe(TRUTHY_STRING),\n  },\n  configurations: {\n    [CONFIG_NAME]: {\n      title: TRUTHY_STRING,\n      description: TRUTHY_STRING,\n      schema: z\n        .object({\n          [PARAM_NAME]: z.string().title(TRUTHY_STRING).describe(TRUTHY_STRING),\n        })\n        .title(TRUTHY_STRING)\n        .describe(TRUTHY_STRING),\n    },\n  },\n  user: {\n    tags: {\n      [TAG_NAME]: {\n        title: TRUTHY_STRING,\n        description: TRUTHY_STRING,\n      },\n    },\n  },\n  channels: {\n    [CHANNEL_NAME]: {\n      title: TRUTHY_STRING,\n      description: TRUTHY_STRING,\n      messages: {\n        [MESSAGE_TYPE]: {\n          schema: z\n            .object({\n              [PARAM_NAME]: z.string().title(TRUTHY_STRING).describe(TRUTHY_STRING),\n            })\n            .title(TRUTHY_STRING)\n            .describe(TRUTHY_STRING),\n        },\n      },\n      message: {\n        tags: {\n          [TAG_NAME]: {\n            title: TRUTHY_STRING,\n            description: TRUTHY_STRING,\n          },\n        },\n      },\n      conversation: {\n        tags: {\n          [TAG_NAME]: {\n            title: TRUTHY_STRING,\n            description: TRUTHY_STRING,\n          },\n        },\n      },\n    },\n  },\n  states: {\n    [STATE_NAME]: {\n      type: 'integration',\n      schema: z\n        .object({\n          [PARAM_NAME]: z.string().title(TRUTHY_STRING).describe(TRUTHY_STRING),\n        })\n        .title(TRUTHY_STRING)\n        .describe(TRUTHY_STRING),\n    },\n  },\n  secrets: {\n    [SECRET_NAME]: {\n      description: TRUTHY_STRING,\n    },\n  },\n} as const satisfies IntegrationDefinitionProps\n\nconst mockLogger = {\n  log: vi.fn((message) => void message),\n  warn: vi.fn((message) => void message),\n  error: vi.fn((message) => void message),\n  debug: vi.fn((message) => void message),\n}\n\nconst lintDefinition = async (definition: IntegrationDefinitionProps) => {\n  const integrationDefinition = new IntegrationDefinition(definition)\n  const integrationBody = await prepareCreateIntegrationBody(integrationDefinition)\n  const linter = new IntegrationLinter({ ...integrationBody, secrets: integrationDefinition.secrets })\n  await linter.lint()\n  return linter\n}\n\nconst lintDefinitionAndReturnResults = async (definition: IntegrationDefinitionProps) => {\n  const linter = await lintDefinition(definition)\n  return linter.getSortedResults()\n}\n\nconst lintDefinitionAndLogResults = async (definition: IntegrationDefinitionProps) => {\n  const linter = await lintDefinition(definition)\n  linter.logResults(mockLogger as any)\n}\n\ndescribe.concurrent('Integration Linter', () => {\n  test('should lint a valid definition without giving errors', async () => {\n    // arrange\n    const definition = VALID_INTEGRATION\n\n    // act\n    const results = await lintDefinitionAndReturnResults(definition)\n\n    expect(results).toEqual([])\n  })\n\n  test('should report an error when missing required fields', async () => {\n    // arrange\n    const definition = {\n      ...VALID_INTEGRATION,\n      title: EMPTY_STRING,\n    } as const\n\n    // act\n    const results = await lintDefinitionAndReturnResults(definition)\n\n    // assert\n    expect(results[0]?.message).toContain('title')\n  })\n\n  test('should report an error when missing a title in an action input schema', async () => {\n    // arrange\n    const definition = {\n      ...VALID_INTEGRATION,\n      actions: {\n        [ACTION_NAME]: {\n          ...VALID_INTEGRATION.actions[ACTION_NAME],\n          input: {\n            schema: z.object({\n              [PARAM_NAME]: z.string().describe(TRUTHY_STRING),\n            }),\n          },\n        },\n      },\n    } as const\n\n    // act\n    const results = await lintDefinitionAndReturnResults(definition)\n\n    // assert\n    expect(results[0]?.message).toContain('title')\n  })\n\n  test('should log as an error when severity is 0', async () => {\n    // arrange\n    const definition = {\n      ...VALID_INTEGRATION,\n      title: EMPTY_STRING,\n    } as const\n\n    // act\n    await lintDefinitionAndLogResults(definition)\n\n    // assert\n    expect(mockLogger.error).toHaveBeenCalled()\n  })\n\n  test('should log as a warning when severity is 1', async () => {\n    // arrange\n    const definition = {\n      ...VALID_INTEGRATION,\n      user: {\n        tags: {\n          [TAG_NAME]: {},\n        },\n      },\n    } as const\n\n    // act\n    await lintDefinitionAndLogResults(definition)\n\n    // assert\n    expect(mockLogger.warn).toHaveBeenCalled()\n  })\n})\n"],
  "mappings": "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",
  "names": []
}
