{
  "version": 3,
  "sources": ["../../../../src/code-generation/interface-implementation/integration-typings/index.ts"],
  "sourcesContent": ["import * as sdk from '@botpress/sdk'\nimport _ from 'lodash'\nimport { GENERATED_HEADER, INDEX_FILE } from '../../consts'\nimport { Module } from '../../module'\nimport { ActionsModule } from './actions-module'\nimport { ChannelsModule } from './channels-module'\nimport { EntitiesModule } from './entities-module'\nimport { EventsModule } from './events-module'\n\ntype InterfaceTypingsModuleDependencies = {\n  actionsModule: ActionsModule\n  channelsModule: ChannelsModule\n  eventsModule: EventsModule\n  entitiesModule: EntitiesModule\n}\n\nexport class InterfaceTypingsModule extends Module {\n  private _dependencies: InterfaceTypingsModuleDependencies\n\n  public constructor(private _interface: sdk.InterfacePackage['definition']) {\n    super({\n      path: INDEX_FILE,\n      exportName: 'TInterface',\n    })\n\n    const references: Record<string, sdk.z.Schema> = _.mapValues(_interface.entities, (e) => e.schema)\n\n    type ZodObjectSchema = sdk.z.ZodObject | sdk.z.ZodRecord\n    const derefObject = (obj: { schema: ZodObjectSchema }) => {\n      return {\n        ...obj,\n        schema: obj.schema.dereference(references) as ZodObjectSchema,\n      }\n    }\n\n    _interface = {\n      ..._interface,\n      actions: _.mapValues(_interface.actions, (a) => ({\n        ...a,\n        input: derefObject(a.input),\n        output: derefObject(a.output),\n      })),\n      channels: _.mapValues(_interface.channels, (c) => ({\n        ...c,\n        messages: _.mapValues(c.messages, (m) => derefObject(m)),\n      })),\n      events: _.mapValues(_interface.events, (e) => derefObject(e)),\n    }\n\n    const actionsModule = new ActionsModule(_interface.actions ?? {})\n    actionsModule.unshift('actions')\n\n    const channelsModule = new ChannelsModule(_interface.channels ?? {})\n    channelsModule.unshift('channels')\n\n    const eventsModule = new EventsModule(_interface.events ?? {})\n    eventsModule.unshift('events')\n\n    const entitiesModule = new EntitiesModule(_interface.entities ?? {})\n    entitiesModule.unshift('entities')\n\n    this._dependencies = {\n      actionsModule,\n      channelsModule,\n      eventsModule,\n      entitiesModule,\n    }\n\n    for (const dep of Object.values(this._dependencies)) {\n      this.pushDep(dep)\n    }\n  }\n\n  public async getContent() {\n    let content = ''\n\n    const { actionsModule, channelsModule, eventsModule, entitiesModule } = this._dependencies\n\n    const actionsImport = actionsModule.import(this)\n    const channelsImport = channelsModule.import(this)\n    const eventsImport = eventsModule.import(this)\n    const entitiesImport = entitiesModule.import(this)\n\n    content += [\n      GENERATED_HEADER,\n      `import * as ${actionsModule.name} from \"./${actionsImport}\"`,\n      `import * as ${channelsModule.name} from \"./${channelsImport}\"`,\n      `import * as ${eventsModule.name} from \"./${eventsImport}\"`,\n      `import * as ${entitiesModule.name} from \"./${entitiesImport}\"`,\n      `export * as ${actionsModule.name} from \"./${actionsImport}\"`,\n      `export * as ${channelsModule.name} from \"./${channelsImport}\"`,\n      `export * as ${eventsModule.name} from \"./${eventsImport}\"`,\n      `export * as ${entitiesModule.name} from \"./${entitiesImport}\"`,\n      '',\n      'export type TInterface = {',\n      `  name: \"${this._interface.name}\"`,\n      `  version: \"${this._interface.version}\"`,\n      `  actions: ${actionsModule.name}.${actionsModule.exportName}`,\n      `  channels: ${channelsModule.name}.${channelsModule.exportName}`,\n      `  events: ${eventsModule.name}.${eventsModule.exportName}`,\n      `  entities: ${entitiesModule.name}.${entitiesModule.exportName}`,\n      '}',\n    ].join('\\n')\n\n    return content\n  }\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AACA,oBAAc;AACd,oBAA6C;AAC7C,oBAAuB;AACvB,4BAA8B;AAC9B,6BAA+B;AAC/B,6BAA+B;AAC/B,2BAA6B;AAStB,MAAM,+BAA+B,qBAAO;AAAA,EAG1C,YAAoB,YAAgD;AACzE,UAAM;AAAA,MACJ,MAAM;AAAA,MACN,YAAY;AAAA,IACd,CAAC;AAJwB;AAMzB,UAAM,aAA2C,cAAAA,QAAE,UAAU,WAAW,UAAU,CAAC,MAAM,EAAE,MAAM;AAGjG,UAAM,cAAc,CAAC,QAAqC;AACxD,aAAO;AAAA,QACL,GAAG;AAAA,QACH,QAAQ,IAAI,OAAO,YAAY,UAAU;AAAA,MAC3C;AAAA,IACF;AAEA,iBAAa;AAAA,MACX,GAAG;AAAA,MACH,SAAS,cAAAA,QAAE,UAAU,WAAW,SAAS,CAAC,OAAO;AAAA,QAC/C,GAAG;AAAA,QACH,OAAO,YAAY,EAAE,KAAK;AAAA,QAC1B,QAAQ,YAAY,EAAE,MAAM;AAAA,MAC9B,EAAE;AAAA,MACF,UAAU,cAAAA,QAAE,UAAU,WAAW,UAAU,CAAC,OAAO;AAAA,QACjD,GAAG;AAAA,QACH,UAAU,cAAAA,QAAE,UAAU,EAAE,UAAU,CAAC,MAAM,YAAY,CAAC,CAAC;AAAA,MACzD,EAAE;AAAA,MACF,QAAQ,cAAAA,QAAE,UAAU,WAAW,QAAQ,CAAC,MAAM,YAAY,CAAC,CAAC;AAAA,IAC9D;AAEA,UAAM,gBAAgB,IAAI,oCAAc,WAAW,WAAW,CAAC,CAAC;AAChE,kBAAc,QAAQ,SAAS;AAE/B,UAAM,iBAAiB,IAAI,sCAAe,WAAW,YAAY,CAAC,CAAC;AACnE,mBAAe,QAAQ,UAAU;AAEjC,UAAM,eAAe,IAAI,kCAAa,WAAW,UAAU,CAAC,CAAC;AAC7D,iBAAa,QAAQ,QAAQ;AAE7B,UAAM,iBAAiB,IAAI,sCAAe,WAAW,YAAY,CAAC,CAAC;AACnE,mBAAe,QAAQ,UAAU;AAEjC,SAAK,gBAAgB;AAAA,MACnB;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,IACF;AAEA,eAAW,OAAO,OAAO,OAAO,KAAK,aAAa,GAAG;AACnD,WAAK,QAAQ,GAAG;AAAA,IAClB;AAAA,EACF;AAAA,EAtDQ;AAAA,EAwDR,MAAa,aAAa;AACxB,QAAI,UAAU;AAEd,UAAM,EAAE,eAAe,gBAAgB,cAAc,eAAe,IAAI,KAAK;AAE7E,UAAM,gBAAgB,cAAc,OAAO,IAAI;AAC/C,UAAM,iBAAiB,eAAe,OAAO,IAAI;AACjD,UAAM,eAAe,aAAa,OAAO,IAAI;AAC7C,UAAM,iBAAiB,eAAe,OAAO,IAAI;AAEjD,eAAW;AAAA,MACT;AAAA,MACA,eAAe,cAAc,gBAAgB;AAAA,MAC7C,eAAe,eAAe,gBAAgB;AAAA,MAC9C,eAAe,aAAa,gBAAgB;AAAA,MAC5C,eAAe,eAAe,gBAAgB;AAAA,MAC9C,eAAe,cAAc,gBAAgB;AAAA,MAC7C,eAAe,eAAe,gBAAgB;AAAA,MAC9C,eAAe,aAAa,gBAAgB;AAAA,MAC5C,eAAe,eAAe,gBAAgB;AAAA,MAC9C;AAAA,MACA;AAAA,MACA,YAAY,KAAK,WAAW;AAAA,MAC5B,eAAe,KAAK,WAAW;AAAA,MAC/B,cAAc,cAAc,QAAQ,cAAc;AAAA,MAClD,eAAe,eAAe,QAAQ,eAAe;AAAA,MACrD,aAAa,aAAa,QAAQ,aAAa;AAAA,MAC/C,eAAe,eAAe,QAAQ,eAAe;AAAA,MACrD;AAAA,IACF,EAAE,KAAK,IAAI;AAEX,WAAO;AAAA,EACT;AACF;",
  "names": ["_"]
}
