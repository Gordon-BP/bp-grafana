"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var integration_typings_exports = {};
__export(integration_typings_exports, {
  InterfaceTypingsModule: () => InterfaceTypingsModule
});
module.exports = __toCommonJS(integration_typings_exports);
var import_lodash = __toESM(require("lodash"));
var import_consts = require("../../consts");
var import_module = require("../../module");
var import_actions_module = require("./actions-module");
var import_channels_module = require("./channels-module");
var import_entities_module = require("./entities-module");
var import_events_module = require("./events-module");
class InterfaceTypingsModule extends import_module.Module {
  constructor(_interface) {
    super({
      path: import_consts.INDEX_FILE,
      exportName: "TInterface"
    });
    this._interface = _interface;
    const references = import_lodash.default.mapValues(_interface.entities, (e) => e.schema);
    const derefObject = (obj) => {
      return {
        ...obj,
        schema: obj.schema.dereference(references)
      };
    };
    _interface = {
      ..._interface,
      actions: import_lodash.default.mapValues(_interface.actions, (a) => ({
        ...a,
        input: derefObject(a.input),
        output: derefObject(a.output)
      })),
      channels: import_lodash.default.mapValues(_interface.channels, (c) => ({
        ...c,
        messages: import_lodash.default.mapValues(c.messages, (m) => derefObject(m))
      })),
      events: import_lodash.default.mapValues(_interface.events, (e) => derefObject(e))
    };
    const actionsModule = new import_actions_module.ActionsModule(_interface.actions ?? {});
    actionsModule.unshift("actions");
    const channelsModule = new import_channels_module.ChannelsModule(_interface.channels ?? {});
    channelsModule.unshift("channels");
    const eventsModule = new import_events_module.EventsModule(_interface.events ?? {});
    eventsModule.unshift("events");
    const entitiesModule = new import_entities_module.EntitiesModule(_interface.entities ?? {});
    entitiesModule.unshift("entities");
    this._dependencies = {
      actionsModule,
      channelsModule,
      eventsModule,
      entitiesModule
    };
    for (const dep of Object.values(this._dependencies)) {
      this.pushDep(dep);
    }
  }
  _dependencies;
  async getContent() {
    let content = "";
    const { actionsModule, channelsModule, eventsModule, entitiesModule } = this._dependencies;
    const actionsImport = actionsModule.import(this);
    const channelsImport = channelsModule.import(this);
    const eventsImport = eventsModule.import(this);
    const entitiesImport = entitiesModule.import(this);
    content += [
      import_consts.GENERATED_HEADER,
      `import * as ${actionsModule.name} from "./${actionsImport}"`,
      `import * as ${channelsModule.name} from "./${channelsImport}"`,
      `import * as ${eventsModule.name} from "./${eventsImport}"`,
      `import * as ${entitiesModule.name} from "./${entitiesImport}"`,
      `export * as ${actionsModule.name} from "./${actionsImport}"`,
      `export * as ${channelsModule.name} from "./${channelsImport}"`,
      `export * as ${eventsModule.name} from "./${eventsImport}"`,
      `export * as ${entitiesModule.name} from "./${entitiesImport}"`,
      "",
      "export type TInterface = {",
      `  name: "${this._interface.name}"`,
      `  version: "${this._interface.version}"`,
      `  actions: ${actionsModule.name}.${actionsModule.exportName}`,
      `  channels: ${channelsModule.name}.${channelsModule.exportName}`,
      `  events: ${eventsModule.name}.${eventsModule.exportName}`,
      `  entities: ${entitiesModule.name}.${entitiesModule.exportName}`,
      "}"
    ].join("\n");
    return content;
  }
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  InterfaceTypingsModule
});
//# sourceMappingURL=index.js.map
