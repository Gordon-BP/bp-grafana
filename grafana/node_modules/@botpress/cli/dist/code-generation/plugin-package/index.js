"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod2, isNodeMode, target) => (target = mod2 != null ? __create(__getProtoOf(mod2)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod2 || !mod2.__esModule ? __defProp(target, "default", { value: mod2, enumerable: true }) : target,
  mod2
));
var __toCommonJS = (mod2) => __copyProps(__defProp({}, "__esModule", { value: true }), mod2);
var plugin_package_exports = {};
__export(plugin_package_exports, {
  generatePluginPackage: () => generatePluginPackage
});
module.exports = __toCommonJS(plugin_package_exports);
var import_lodash = __toESM(require("lodash"));
var utils = __toESM(require("../../utils"));
var consts = __toESM(require("../consts"));
var gen = __toESM(require("../generators"));
var mod = __toESM(require("../module"));
var import_plugin_package_definition = require("./plugin-package-definition");
class ImplementationModule extends mod.Module {
  constructor(_implementationCode) {
    super({
      path: "implementation.ts",
      exportName: "default"
    });
    this._implementationCode = _implementationCode;
  }
  async getContent() {
    const base64Str = Buffer.from(this._implementationCode).toString("base64");
    const chunks = import_lodash.default.chunk(base64Str, 80).map((chunk) => chunk.join(""));
    return [
      //
      "export default Buffer.from([",
      ...chunks.map((chunk) => `  "${chunk}",`),
      '].join(""), "base64")'
    ].join("\n");
  }
}
class LocalPluginModule extends mod.Module {
  constructor(_pkg) {
    super({
      path: consts.INDEX_FILE,
      exportName: consts.DEFAULT_EXPORT_NAME
    });
    this._pkg = _pkg;
    this._implModule = new ImplementationModule(this._pkg.implementationCode);
    this.pushDep(this._implModule);
  }
  _implModule;
  async getContent() {
    const implImport = this._implModule.import(this);
    const id = void 0;
    const uri = utils.path.win32.escapeBackslashes(this._pkg.path);
    const definitionImport = utils.path.rmExtension(
      utils.path.join(this._pkg.path, consts.fromWorkDir.pluginDefinition)
    );
    const tsId = gen.primitiveToTypescriptValue(id);
    const tsUri = gen.primitiveToTypescriptValue(uri);
    const tsName = gen.primitiveToTypescriptValue(this._pkg.name);
    const tsVersion = gen.primitiveToTypescriptValue(this._pkg.version);
    return [
      consts.GENERATED_HEADER,
      'import * as sdk from "@botpress/sdk"',
      "",
      `import definition from "${definitionImport}"`,
      `import implementation from "./${implImport}"`,
      "",
      "export default {",
      '  type: "plugin",',
      `  id: ${tsId},`,
      `  uri: ${tsUri},`,
      `  name: ${tsName},`,
      `  version: ${tsVersion},`,
      "  definition,",
      "  implementation,",
      "} satisfies sdk.PluginPackage"
    ].join("\n");
  }
}
class RemotePluginModule extends mod.Module {
  constructor(_pkg) {
    super({
      path: consts.INDEX_FILE,
      exportName: consts.DEFAULT_EXPORT_NAME
    });
    this._pkg = _pkg;
    this._implModule = new ImplementationModule(this._pkg.plugin.code);
    this.pushDep(this._implModule);
    this._defModule = new import_plugin_package_definition.PluginPackageDefinitionModule(this._pkg.plugin);
    this._defModule.unshift("definition");
    this.pushDep(this._defModule);
  }
  _implModule;
  _defModule;
  async getContent() {
    const implImport = this._implModule.import(this);
    const defImport = this._defModule.import(this);
    const id = this._pkg.plugin.id;
    const uri = void 0;
    const tsId = gen.primitiveToTypescriptValue(id);
    const tsUri = gen.primitiveToTypescriptValue(uri);
    const tsName = gen.primitiveToTypescriptValue(this._pkg.name);
    const tsVersion = gen.primitiveToTypescriptValue(this._pkg.version);
    return [
      consts.GENERATED_HEADER,
      'import * as sdk from "@botpress/sdk"',
      "",
      `import definition from "./${defImport}"`,
      `import implementation from "./${implImport}"`,
      "",
      "export default {",
      '  type: "plugin",',
      `  id: ${tsId},`,
      `  uri: ${tsUri},`,
      `  name: ${tsName},`,
      `  version: ${tsVersion},`,
      "  definition,",
      "  implementation,",
      "} satisfies sdk.PluginPackage"
    ].join("\n");
  }
}
const generatePluginPackage = async (pkg) => {
  const module2 = pkg.source === "local" ? new LocalPluginModule(pkg) : new RemotePluginModule(pkg);
  return module2.flatten();
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  generatePluginPackage
});
//# sourceMappingURL=index.js.map
