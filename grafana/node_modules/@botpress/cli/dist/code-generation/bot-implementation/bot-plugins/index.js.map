{
  "version": 3,
  "sources": ["../../../../src/code-generation/bot-implementation/bot-plugins/index.ts"],
  "sourcesContent": ["import * as sdk from '@botpress/sdk'\nimport * as consts from '../../consts'\nimport * as mod from '../../module'\nimport * as strings from '../../strings'\nimport { BotPluginModule } from './plugin-module'\n\nexport class BotPluginsIndexModule extends mod.Module {\n  private _pluginModules: BotPluginModule[]\n\n  public constructor(sdkBotDefinition: sdk.BotDefinition) {\n    super({\n      path: consts.INDEX_FILE,\n      exportName: 'plugins',\n    })\n\n    const pluginsModules: BotPluginModule[] = []\n    for (const plugin of Object.values(sdkBotDefinition.plugins ?? {})) {\n      const pluginModule = new BotPluginModule(plugin)\n      pluginModule.unshift(plugin.name)\n      this.pushDep(pluginModule)\n      pluginsModules.push(pluginModule)\n    }\n\n    this._pluginModules = pluginsModules\n  }\n\n  public async getContent(): Promise<string> {\n    const modules = this._pluginModules.map((module) => ({\n      importAlias: strings.importAlias(module.name),\n      importFrom: module.import(this),\n      module,\n    }))\n\n    return [\n      consts.GENERATED_HEADER,\n      'import * as sdk from \"@botpress/sdk\"',\n      ...modules.map(({ importAlias, importFrom }) => `import * as ${importAlias} from \"./${importFrom}\";`),\n      ...modules.map(({ importAlias, importFrom }) => `export * as ${importAlias} from \"./${importFrom}\";`),\n      '',\n      `export const ${this.exportName} = {`,\n      ...modules.map(({ module, importAlias }) => `  \"${module.pluginName}\": ${importAlias}.${module.exportName},`),\n      '}',\n      '',\n      'export type TPlugins = {',\n      ...modules.map(({ module, importAlias }) => `  \"${module.pluginName}\": ${importAlias}.TPlugin;`),\n      '}',\n    ].join('\\n')\n  }\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AACA,aAAwB;AACxB,UAAqB;AACrB,cAAyB;AACzB,2BAAgC;AAEzB,MAAM,8BAA8B,IAAI,OAAO;AAAA,EAC5C;AAAA,EAED,YAAY,kBAAqC;AACtD,UAAM;AAAA,MACJ,MAAM,OAAO;AAAA,MACb,YAAY;AAAA,IACd,CAAC;AAED,UAAM,iBAAoC,CAAC;AAC3C,eAAW,UAAU,OAAO,OAAO,iBAAiB,WAAW,CAAC,CAAC,GAAG;AAClE,YAAM,eAAe,IAAI,qCAAgB,MAAM;AAC/C,mBAAa,QAAQ,OAAO,IAAI;AAChC,WAAK,QAAQ,YAAY;AACzB,qBAAe,KAAK,YAAY;AAAA,IAClC;AAEA,SAAK,iBAAiB;AAAA,EACxB;AAAA,EAEA,MAAa,aAA8B;AACzC,UAAM,UAAU,KAAK,eAAe,IAAI,CAACA,aAAY;AAAA,MACnD,aAAa,QAAQ,YAAYA,QAAO,IAAI;AAAA,MAC5C,YAAYA,QAAO,OAAO,IAAI;AAAA,MAC9B,QAAAA;AAAA,IACF,EAAE;AAEF,WAAO;AAAA,MACL,OAAO;AAAA,MACP;AAAA,MACA,GAAG,QAAQ,IAAI,CAAC,EAAE,aAAa,WAAW,MAAM,eAAe,uBAAuB,cAAc;AAAA,MACpG,GAAG,QAAQ,IAAI,CAAC,EAAE,aAAa,WAAW,MAAM,eAAe,uBAAuB,cAAc;AAAA,MACpG;AAAA,MACA,gBAAgB,KAAK;AAAA,MACrB,GAAG,QAAQ,IAAI,CAAC,EAAE,QAAAA,SAAQ,YAAY,MAAM,MAAMA,QAAO,gBAAgB,eAAeA,QAAO,aAAa;AAAA,MAC5G;AAAA,MACA;AAAA,MACA;AAAA,MACA,GAAG,QAAQ,IAAI,CAAC,EAAE,QAAAA,SAAQ,YAAY,MAAM,MAAMA,QAAO,gBAAgB,sBAAsB;AAAA,MAC/F;AAAA,IACF,EAAE,KAAK,IAAI;AAAA,EACb;AACF;",
  "names": ["module"]
}
