"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod2, isNodeMode, target) => (target = mod2 != null ? __create(__getProtoOf(mod2)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod2 || !mod2.__esModule ? __defProp(target, "default", { value: mod2, enumerable: true }) : target,
  mod2
));
var __toCommonJS = (mod2) => __copyProps(__defProp({}, "__esModule", { value: true }), mod2);
var bot_plugins_exports = {};
__export(bot_plugins_exports, {
  BotPluginsIndexModule: () => BotPluginsIndexModule
});
module.exports = __toCommonJS(bot_plugins_exports);
var consts = __toESM(require("../../consts"));
var mod = __toESM(require("../../module"));
var strings = __toESM(require("../../strings"));
var import_plugin_module = require("./plugin-module");
class BotPluginsIndexModule extends mod.Module {
  _pluginModules;
  constructor(sdkBotDefinition) {
    super({
      path: consts.INDEX_FILE,
      exportName: "plugins"
    });
    const pluginsModules = [];
    for (const plugin of Object.values(sdkBotDefinition.plugins ?? {})) {
      const pluginModule = new import_plugin_module.BotPluginModule(plugin);
      pluginModule.unshift(plugin.name);
      this.pushDep(pluginModule);
      pluginsModules.push(pluginModule);
    }
    this._pluginModules = pluginsModules;
  }
  async getContent() {
    const modules = this._pluginModules.map((module2) => ({
      importAlias: strings.importAlias(module2.name),
      importFrom: module2.import(this),
      module: module2
    }));
    return [
      consts.GENERATED_HEADER,
      'import * as sdk from "@botpress/sdk"',
      ...modules.map(({ importAlias, importFrom }) => `import * as ${importAlias} from "./${importFrom}";`),
      ...modules.map(({ importAlias, importFrom }) => `export * as ${importAlias} from "./${importFrom}";`),
      "",
      `export const ${this.exportName} = {`,
      ...modules.map(({ module: module2, importAlias }) => `  "${module2.pluginName}": ${importAlias}.${module2.exportName},`),
      "}",
      "",
      "export type TPlugins = {",
      ...modules.map(({ module: module2, importAlias }) => `  "${module2.pluginName}": ${importAlias}.TPlugin;`),
      "}"
    ].join("\n");
  }
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  BotPluginsIndexModule
});
//# sourceMappingURL=index.js.map
