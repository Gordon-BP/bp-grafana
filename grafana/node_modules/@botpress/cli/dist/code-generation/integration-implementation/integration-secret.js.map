{
  "version": 3,
  "sources": ["../../../src/code-generation/integration-implementation/integration-secret.ts"],
  "sourcesContent": ["import { IntegrationDefinition } from '@botpress/sdk'\nimport { casing } from '../../utils'\nimport * as consts from '../consts'\nimport { Module } from '../module'\n\nexport const secretEnvVariableName = (secretName: string) => `SECRET_${casing.to.screamingSnakeCase(secretName)}`\n\nexport class IntegrationSecretIndexModule extends Module {\n  public constructor(private _integration: IntegrationDefinition) {\n    super({ exportName: 'secrets', path: consts.INDEX_FILE })\n  }\n\n  public async getContent() {\n    let content = consts.GENERATED_HEADER\n    content += 'class Secrets {\\n'\n    for (const [secretName, { optional }] of Object.entries(this._integration.secrets ?? {})) {\n      const envVariableName = secretEnvVariableName(secretName)\n      const fieldName = casing.to.screamingSnakeCase(secretName)\n\n      if (optional) {\n        content += `  public get ${fieldName}(): string | undefined {\\n`\n        content += `    const envVarValue = process.env.${envVariableName}\\n`\n        content += '    return envVarValue\\n'\n        content += '  }\\n'\n      } else {\n        content += `  public get ${fieldName}(): string {\\n`\n        content += `    const envVarValue = process.env.${envVariableName}\\n`\n        content += `    if (!envVarValue) throw new Error('Missing required secret \"${secretName}\"')\\n`\n        content += '    return envVarValue\\n'\n        content += '  }\\n'\n      }\n    }\n    content += '}\\n'\n    content += 'export const secrets = new Secrets()\\n'\n    return content\n  }\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA,mBAAuB;AACvB,aAAwB;AACxB,oBAAuB;AAEhB,MAAM,wBAAwB,CAAC,eAAuB,UAAU,oBAAO,GAAG,mBAAmB,UAAU;AAEvG,MAAM,qCAAqC,qBAAO;AAAA,EAChD,YAAoB,cAAqC;AAC9D,UAAM,EAAE,YAAY,WAAW,MAAM,OAAO,WAAW,CAAC;AAD/B;AAAA,EAE3B;AAAA,EAEA,MAAa,aAAa;AACxB,QAAI,UAAU,OAAO;AACrB,eAAW;AACX,eAAW,CAAC,YAAY,EAAE,SAAS,CAAC,KAAK,OAAO,QAAQ,KAAK,aAAa,WAAW,CAAC,CAAC,GAAG;AACxF,YAAM,kBAAkB,sBAAsB,UAAU;AACxD,YAAM,YAAY,oBAAO,GAAG,mBAAmB,UAAU;AAEzD,UAAI,UAAU;AACZ,mBAAW,gBAAgB;AAAA;AAC3B,mBAAW,uCAAuC;AAAA;AAClD,mBAAW;AACX,mBAAW;AAAA,MACb,OAAO;AACL,mBAAW,gBAAgB;AAAA;AAC3B,mBAAW,uCAAuC;AAAA;AAClD,mBAAW,mEAAmE;AAAA;AAC9E,mBAAW;AACX,mBAAW;AAAA,MACb;AAAA,IACF;AACA,eAAW;AACX,eAAW;AACX,WAAO;AAAA,EACT;AACF;",
  "names": []
}
