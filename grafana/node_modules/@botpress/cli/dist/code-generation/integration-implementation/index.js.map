{
  "version": 3,
  "sources": ["../../../src/code-generation/integration-implementation/index.ts"],
  "sourcesContent": ["import * as sdk from '@botpress/sdk'\nimport * as consts from '../consts'\nimport * as types from '../typings'\nimport { IntegrationImplementationModule } from './integration-implementation'\nimport { IntegrationSecretIndexModule } from './integration-secret'\n\nconst generateIntegrationImplementationCls = async (\n  sdkIntegrationDefinition: sdk.IntegrationDefinition,\n  implPath: string\n): Promise<types.File[]> => {\n  const indexModule = new IntegrationImplementationModule(sdkIntegrationDefinition)\n  indexModule.unshift(implPath)\n  return indexModule.flatten()\n}\n\nconst generateIntegrationSecrets = async (\n  sdkIntegrationDefinition: sdk.IntegrationDefinition,\n  secretsPath: string\n): Promise<types.File[]> => {\n  const indexModule = new IntegrationSecretIndexModule(sdkIntegrationDefinition)\n  indexModule.unshift(secretsPath)\n  return indexModule.flatten()\n}\n\nconst generateIntegrationImplementationIndex = async (implPath: string, secretsPath: string): Promise<types.File> => {\n  let content = ''\n  content += `export * from './${implPath}'\\n`\n  content += `export * from './${secretsPath}'\\n`\n  return {\n    path: consts.INDEX_FILE,\n    content,\n  }\n}\n\nexport const generateIntegrationImplementation = async (\n  sdkIntegrationDefinition: sdk.IntegrationDefinition\n): Promise<types.File[]> => {\n  const implPath = consts.fromOutDir.implementationDir\n  const secretsPath = consts.fromOutDir.secretsDir\n  const implFiles = await generateIntegrationImplementationCls(sdkIntegrationDefinition, implPath)\n  const secretFiles = await generateIntegrationSecrets(sdkIntegrationDefinition, secretsPath)\n  const indexFile = await generateIntegrationImplementationIndex(implPath, secretsPath)\n  return [...implFiles, ...secretFiles, indexFile]\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AACA,aAAwB;AAExB,wCAAgD;AAChD,gCAA6C;AAE7C,MAAM,uCAAuC,OAC3C,0BACA,aAC0B;AAC1B,QAAM,cAAc,IAAI,kEAAgC,wBAAwB;AAChF,cAAY,QAAQ,QAAQ;AAC5B,SAAO,YAAY,QAAQ;AAC7B;AAEA,MAAM,6BAA6B,OACjC,0BACA,gBAC0B;AAC1B,QAAM,cAAc,IAAI,uDAA6B,wBAAwB;AAC7E,cAAY,QAAQ,WAAW;AAC/B,SAAO,YAAY,QAAQ;AAC7B;AAEA,MAAM,yCAAyC,OAAO,UAAkB,gBAA6C;AACnH,MAAI,UAAU;AACd,aAAW,oBAAoB;AAAA;AAC/B,aAAW,oBAAoB;AAAA;AAC/B,SAAO;AAAA,IACL,MAAM,OAAO;AAAA,IACb;AAAA,EACF;AACF;AAEO,MAAM,oCAAoC,OAC/C,6BAC0B;AAC1B,QAAM,WAAW,OAAO,WAAW;AACnC,QAAM,cAAc,OAAO,WAAW;AACtC,QAAM,YAAY,MAAM,qCAAqC,0BAA0B,QAAQ;AAC/F,QAAM,cAAc,MAAM,2BAA2B,0BAA0B,WAAW;AAC1F,QAAM,YAAY,MAAM,uCAAuC,UAAU,WAAW;AACpF,SAAO,CAAC,GAAG,WAAW,GAAG,aAAa,SAAS;AACjD;",
  "names": []
}
