{
  "version": 3,
  "sources": ["../../../../src/code-generation/plugin-implementation/plugin-typings/index.ts"],
  "sourcesContent": ["import * as sdk from '@botpress/sdk'\nimport * as utils from '../../../utils'\nimport * as consts from '../../consts'\nimport { IntegrationTypingsModule } from '../../integration-implementation/integration-typings'\nimport { InterfaceTypingsModule } from '../../interface-implementation'\nimport { Module, ReExportTypeModule, SingleFileModule } from '../../module'\nimport { ActionsModule } from './actions-module'\nimport { DefaultConfigurationModule } from './configuration-module'\nimport { EventsModule } from './events-module'\nimport { StatesModule } from './states-module'\n\nclass PluginIntegrationsModule extends ReExportTypeModule {\n  public constructor(plugin: sdk.PluginDefinition) {\n    super({\n      exportName: 'Integrations',\n    })\n\n    for (const [alias, integration] of Object.entries(plugin.integrations ?? {})) {\n      const integrationModule = new IntegrationTypingsModule(integration.definition)\n      integrationModule.unshift(alias)\n      this.pushDep(integrationModule)\n    }\n  }\n}\n\nclass PluginInterfacesModule extends ReExportTypeModule {\n  public constructor(plugin: sdk.PluginDefinition) {\n    super({\n      exportName: 'Interfaces',\n    })\n\n    for (const [alias, intrface] of Object.entries(plugin.interfaces ?? {})) {\n      const interfaceModule = new InterfaceTypingsModule(intrface.definition)\n      interfaceModule.unshift(alias)\n      this.pushDep(interfaceModule)\n    }\n  }\n}\n\ntype PluginTypingsIndexDependencies = {\n  integrationsModule: PluginIntegrationsModule\n  interfacesModule: PluginInterfacesModule\n  defaultConfigModule: DefaultConfigurationModule\n  eventsModule: EventsModule\n  statesModule: StatesModule\n  actionsModule: ActionsModule\n}\n\ntype _assertPropsInPluginDefinition = utils.types.AssertKeyOf<'props', sdk.PluginDefinition>\nconst _isLocalPluginDefinition = (\n  plugin: sdk.PluginDefinition | sdk.PluginPackage['definition']\n): plugin is sdk.PluginDefinition => {\n  return 'props' in plugin\n}\n\nexport class PluginTypingsModule extends Module {\n  private _dependencies: PluginTypingsIndexDependencies\n\n  public constructor(plugin: sdk.PluginDefinition | sdk.PluginPackage['definition']) {\n    super({\n      exportName: 'TPlugin',\n      path: consts.INDEX_FILE,\n    })\n\n    const integrationsModule = _isLocalPluginDefinition(plugin)\n      ? new PluginIntegrationsModule(plugin)\n      : new SingleFileModule({\n          path: consts.INDEX_FILE,\n          exportName: 'Integrations',\n          content: 'export type Integrations = {}',\n        })\n    integrationsModule.unshift('integrations')\n    this.pushDep(integrationsModule)\n\n    const interfacesModule = _isLocalPluginDefinition(plugin)\n      ? new PluginInterfacesModule(plugin)\n      : new SingleFileModule({\n          path: consts.INDEX_FILE,\n          exportName: 'Interfaces',\n          content: 'export type Interfaces = {}',\n        })\n    interfacesModule.unshift('interfaces')\n    this.pushDep(interfacesModule)\n\n    const defaultConfigModule = new DefaultConfigurationModule(plugin.configuration)\n    defaultConfigModule.unshift('configuration')\n    this.pushDep(defaultConfigModule)\n\n    const eventsModule = new EventsModule(plugin.events ?? {})\n    eventsModule.unshift('events')\n    this.pushDep(eventsModule)\n\n    const statesModule = new StatesModule(plugin.states ?? {})\n    statesModule.unshift('states')\n    this.pushDep(statesModule)\n\n    const actionsModule = new ActionsModule(plugin.actions ?? {})\n    actionsModule.unshift('actions')\n    this.pushDep(actionsModule)\n\n    this._dependencies = {\n      integrationsModule,\n      interfacesModule,\n      defaultConfigModule,\n      eventsModule,\n      statesModule,\n      actionsModule,\n    }\n  }\n\n  public async getContent() {\n    const { integrationsModule, interfacesModule, defaultConfigModule, eventsModule, statesModule, actionsModule } =\n      this._dependencies\n\n    const integrationsImport = integrationsModule.import(this)\n    const interfacesImport = interfacesModule.import(this)\n    const defaultConfigImport = defaultConfigModule.import(this)\n    const eventsImport = eventsModule.import(this)\n    const statesImport = statesModule.import(this)\n    const actionsImport = actionsModule\n\n    return [\n      consts.GENERATED_HEADER,\n      `import * as ${integrationsModule.name} from './${integrationsImport}'`,\n      `import * as ${interfacesModule.name} from './${interfacesImport}'`,\n      `import * as ${defaultConfigModule.name} from './${defaultConfigImport}'`,\n      `import * as ${eventsModule.name} from './${eventsModule.name}'`,\n      `import * as ${statesModule.name} from './${statesModule.name}'`,\n      `import * as ${actionsModule.name} from './${actionsImport.name}'`,\n      '',\n      `export * as ${integrationsModule.name} from './${integrationsImport}'`,\n      `export * as ${interfacesModule.name} from './${interfacesImport}'`,\n      `export * as ${defaultConfigModule.name} from './${defaultConfigImport}'`,\n      `export * as ${eventsModule.name} from './${eventsImport}'`,\n      `export * as ${statesModule.name} from './${statesImport}'`,\n      `export * as ${actionsModule.name} from './${actionsImport.name}'`,\n      '',\n      'export type TPlugin = {',\n      `  integrations: ${integrationsModule.name}.${integrationsModule.exportName}`,\n      `  interfaces: ${interfacesModule.name}.${interfacesModule.exportName}`,\n      `  configuration: ${defaultConfigModule.name}.${defaultConfigModule.exportName}`,\n      `  events: ${eventsModule.name}.${eventsModule.exportName}`,\n      `  states: ${statesModule.name}.${statesModule.exportName}`,\n      `  actions: ${actionsModule.name}.${actionsModule.exportName}`,\n      '}',\n    ].join('\\n')\n  }\n}\n"],
  "mappings": "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",
  "names": []
}
