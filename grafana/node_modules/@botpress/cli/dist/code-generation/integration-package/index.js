"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var integration_package_exports = {};
__export(integration_package_exports, {
  generateIntegrationPackage: () => generateIntegrationPackage
});
module.exports = __toCommonJS(integration_package_exports);
var utils = __toESM(require("../../utils"));
var consts = __toESM(require("../consts"));
var import_integration_package_definition = require("./integration-package-definition");
const generateIntegrationPackageModule = (definitionImport, pkg) => {
  const refLine = pkg.source === "local" ? `uri: "${utils.path.win32.escapeBackslashes(pkg.path)}"` : `id: "${pkg.integration.id}"`;
  return [
    consts.GENERATED_HEADER,
    'import * as sdk from "@botpress/sdk"',
    "",
    `import definition from "${utils.path.win32.escapeBackslashes(definitionImport)}"`,
    "",
    "export default {",
    '  type: "integration",',
    `  ${refLine},`,
    "  definition,",
    "} satisfies sdk.IntegrationPackage"
  ].join("\n");
};
const generateIntegrationPackageFromRemote = async (pkg) => {
  const definitionDir = "definition";
  const definitionModule = new import_integration_package_definition.IntegrationPackageDefinitionModule(pkg.integration);
  definitionModule.unshift(definitionDir);
  const definitionFiles = await definitionModule.flatten();
  return [
    ...definitionFiles,
    {
      path: consts.INDEX_FILE,
      content: generateIntegrationPackageModule(`./${definitionDir}`, pkg)
    }
  ];
};
const generateIntegrationPackageFromLocal = async (pkg) => {
  let definitionImport = utils.path.join(pkg.path, consts.fromWorkDir.integrationDefinition);
  definitionImport = utils.path.rmExtension(definitionImport);
  return [
    {
      path: consts.INDEX_FILE,
      content: generateIntegrationPackageModule(definitionImport, pkg)
    }
  ];
};
const generateIntegrationPackage = async (pkg) => {
  if (pkg.source === "remote") {
    return generateIntegrationPackageFromRemote(pkg);
  }
  return generateIntegrationPackageFromLocal(pkg);
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  generateIntegrationPackage
});
//# sourceMappingURL=index.js.map
