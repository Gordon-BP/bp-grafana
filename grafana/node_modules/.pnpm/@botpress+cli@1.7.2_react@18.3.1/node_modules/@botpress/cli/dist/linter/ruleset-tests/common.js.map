{
  "version": 3,
  "sources": ["../../../src/linter/ruleset-tests/common.ts"],
  "sourcesContent": ["import { Document, type ISpectralDiagnostic, Spectral, type RuleDefinition } from '@stoplight/spectral-core'\nimport { Json as JsonParser } from '@stoplight/spectral-parsers'\nimport { describe } from 'vitest'\n\nexport type RecursivePartial<T> = {\n  [P in Extract<keyof T, string>]?: T[P] extends (infer U)[]\n    ? RecursivePartial<U>[]\n    : T[P] extends object | undefined\n    ? RecursivePartial<T[P]>\n    : T[P]\n}\n\ntype Ruleset = {\n  rules: Record<string, Readonly<RuleDefinition>>\n}\n\nexport const createDescribeRule =\n  <TDefinition>() =>\n  <TRuleset extends Ruleset>(ruleset: TRuleset) =>\n  <TPartialDefinition extends RecursivePartial<TDefinition>>(\n    ruleName: Extract<keyof (typeof ruleset)['rules'], string>,\n    fn: (lint: (definition: TPartialDefinition) => Promise<ISpectralDiagnostic[]>) => void\n  ) =>\n    describe.concurrent(ruleName, () => {\n      const spectral = new Spectral()\n      spectral.setRuleset({ ...ruleset, rules: { [ruleName]: ruleset.rules[ruleName]! } })\n\n      const lintFn = (definition: TPartialDefinition) =>\n        spectral.run(new Document(JSON.stringify(definition), JsonParser))\n\n      fn(lintFn)\n    })\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2BAAkF;AAClF,8BAAmC;AACnC,oBAAyB;AAclB,MAAM,qBACX,MACA,CAA2B,YAC3B,CACE,UACA,OAEA,uBAAS,WAAW,UAAU,MAAM;AAClC,QAAM,WAAW,IAAI,8BAAS;AAC9B,WAAS,WAAW,EAAE,GAAG,SAAS,OAAO,EAAE,CAAC,WAAW,QAAQ,MAAM,UAAW,EAAE,CAAC;AAEnF,QAAM,SAAS,CAAC,eACd,SAAS,IAAI,IAAI,8BAAS,KAAK,UAAU,UAAU,GAAG,wBAAAA,IAAU,CAAC;AAEnE,KAAG,MAAM;AACX,CAAC;",
  "names": ["JsonParser"]
}
