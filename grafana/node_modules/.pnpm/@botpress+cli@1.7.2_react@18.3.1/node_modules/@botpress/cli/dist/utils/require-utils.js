"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var require_utils_exports = {};
__export(require_utils_exports, {
  requireJsCode: () => requireJsCode,
  requireJsFile: () => requireJsFile
});
module.exports = __toCommonJS(require_utils_exports);
var import_module = __toESM(require("module"));
var import_path = __toESM(require("path"));
const requireJsFile = (path) => {
  return require(path);
};
const requireJsCode = (code) => {
  const filedir = "tmp";
  const filename = `${Date.now()}.js`;
  const fileid = import_path.default.join(filedir, filename);
  const m = new import_module.default(fileid);
  m.filename = filename;
  try {
    m._compile(code, filename);
    return m.exports;
  } catch (thrown) {
    const error = thrown instanceof Error ? thrown : new Error(`${thrown}`);
    throw _injectStackTrace(error, code, filename);
  }
};
const STACK_TRACE_SURROUNDING_LINES = 3;
const _injectStackTrace = (compileError, code, filename) => {
  if (!compileError.stack || !compileError.stack.includes(`${filename}:`)) {
    return compileError;
  }
  const [, locationInfo] = compileError.stack.split(`${filename}:`, 2);
  if (!locationInfo) {
    return compileError;
  }
  const [lineNoStr, _rest] = locationInfo.split(":", 2);
  if (!lineNoStr || !_rest) {
    return compileError;
  }
  const [columnStr] = _rest.split(")", 1);
  if (!columnStr) {
    return compileError;
  }
  const lineNo = parseInt(lineNoStr);
  const column = parseInt(columnStr);
  const allLines = code.split("\n");
  const linesBefore = allLines.slice(Math.max(0, lineNo - 1 - STACK_TRACE_SURROUNDING_LINES), lineNo - 1);
  const offendingLine = allLines[lineNo - 1];
  const caretLine = " ".repeat(column - 1) + "^";
  const linesAfter = allLines.slice(lineNo, Math.min(allLines.length, lineNo + STACK_TRACE_SURROUNDING_LINES));
  const stackTrace = [...linesBefore, offendingLine, caretLine, ...linesAfter].join("\n");
  return new Error(`${compileError.message}

Offending code:

${stackTrace}`, { cause: compileError });
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  requireJsCode,
  requireJsFile
});
//# sourceMappingURL=require-utils.js.map
