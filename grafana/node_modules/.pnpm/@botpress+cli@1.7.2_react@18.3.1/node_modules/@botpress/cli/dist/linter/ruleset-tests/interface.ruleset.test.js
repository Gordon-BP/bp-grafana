"use strict";
var import_vitest = require("vitest");
var import_interface = require("../rulesets/interface.ruleset");
var import_common = require("./common");
const describeRule = (0, import_common.createDescribeRule)()(import_interface.INTERFACE_RULESET);
const EMPTY_STRING = "";
const TRUTHY_STRING = "truthy";
const ACTION_NAME = "actionName";
const EVENT_NAME = "eventName";
const PARAM_NAME = "paramName";
const PROPERTIES_PARAM = "properties";
const PARAM_NAMES = [PARAM_NAME, PROPERTIES_PARAM];
const CHANNEL_NAME = "channelName";
const ENTITY_NAME = "entityName";
const MESSAGE_TYPE = "text";
const ZUI = "x-zui";
const LEGACY_ZUI = "ui";
describeRule("action-inputparams-should-have-a-title", (lint) => {
  import_vitest.test.each(PARAM_NAMES)("missing title should trigger (%s)", async (paramName) => {
    const definition = {
      actions: { [ACTION_NAME]: { input: { schema: { properties: { [paramName]: { [ZUI]: {} } } } } } }
    };
    const results = await lint(definition);
    (0, import_vitest.expect)(results).toHaveLength(1);
    (0, import_vitest.expect)(results[0]?.path).toEqual(["actions", ACTION_NAME, "input", "schema", "properties", paramName, ZUI]);
    (0, import_vitest.expect)(results[0]?.message).toContain("title");
  });
  import_vitest.test.each(PARAM_NAMES)("empty title should trigger (%s)", async (paramName) => {
    const definition = {
      actions: {
        [ACTION_NAME]: { input: { schema: { properties: { [paramName]: { [ZUI]: { title: EMPTY_STRING } } } } } }
      }
    };
    const results = await lint(definition);
    (0, import_vitest.expect)(results).toHaveLength(1);
    (0, import_vitest.expect)(results[0]?.path).toEqual(["actions", ACTION_NAME, "input", "schema", "properties", paramName, ZUI, "title"]);
    (0, import_vitest.expect)(results[0]?.message).toContain("title");
  });
  import_vitest.test.each(PARAM_NAMES)("valid title should not trigger (%s)", async (paramName) => {
    const definition = {
      actions: {
        [ACTION_NAME]: { input: { schema: { properties: { [paramName]: { [ZUI]: { title: TRUTHY_STRING } } } } } }
      }
    };
    const results = await lint(definition);
    (0, import_vitest.expect)(results).toHaveLength(0);
  });
});
describeRule("action-inputparams-must-have-a-description", (lint) => {
  import_vitest.test.each(PARAM_NAMES)("missing description should trigger (%s)", async (paramName) => {
    const definition = {
      actions: { [ACTION_NAME]: { input: { schema: { properties: { [paramName]: {} } } } } }
    };
    const results = await lint(definition);
    (0, import_vitest.expect)(results).toHaveLength(1);
    (0, import_vitest.expect)(results[0]?.path).toEqual(["actions", ACTION_NAME, "input", "schema", "properties", paramName]);
    (0, import_vitest.expect)(results[0]?.message).toContain("description");
  });
  import_vitest.test.each(PARAM_NAMES)("empty description should trigger (%s)", async (paramName) => {
    const definition = {
      actions: {
        [ACTION_NAME]: { input: { schema: { properties: { [paramName]: { description: EMPTY_STRING } } } } }
      }
    };
    const results = await lint(definition);
    (0, import_vitest.expect)(results).toHaveLength(1);
    (0, import_vitest.expect)(results[0]?.path).toEqual([
      "actions",
      ACTION_NAME,
      "input",
      "schema",
      "properties",
      paramName,
      "description"
    ]);
    (0, import_vitest.expect)(results[0]?.message).toContain("description");
  });
  import_vitest.test.each(PARAM_NAMES)("valid description should not trigger (%s)", async (paramName) => {
    const definition = {
      actions: {
        [ACTION_NAME]: { input: { schema: { properties: { [paramName]: { description: TRUTHY_STRING } } } } }
      }
    };
    const results = await lint(definition);
    (0, import_vitest.expect)(results).toHaveLength(0);
  });
});
describeRule("action-outputparams-should-have-a-title", (lint) => {
  import_vitest.test.each(PARAM_NAMES)("missing title should trigger (%s)", async (paramName) => {
    const definition = {
      actions: { [ACTION_NAME]: { output: { schema: { properties: { [paramName]: { [ZUI]: {} } } } } } }
    };
    const results = await lint(definition);
    (0, import_vitest.expect)(results).toHaveLength(1);
    (0, import_vitest.expect)(results[0]?.path).toEqual(["actions", ACTION_NAME, "output", "schema", "properties", paramName, ZUI]);
    (0, import_vitest.expect)(results[0]?.message).toContain("title");
  });
  import_vitest.test.each(PARAM_NAMES)("empty title should trigger (%s)", async (paramName) => {
    const definition = {
      actions: {
        [ACTION_NAME]: { output: { schema: { properties: { [paramName]: { [ZUI]: { title: EMPTY_STRING } } } } } }
      }
    };
    const results = await lint(definition);
    (0, import_vitest.expect)(results).toHaveLength(1);
    (0, import_vitest.expect)(results[0]?.path).toEqual([
      "actions",
      ACTION_NAME,
      "output",
      "schema",
      "properties",
      paramName,
      ZUI,
      "title"
    ]);
    (0, import_vitest.expect)(results[0]?.message).toContain("title");
  });
  import_vitest.test.each(PARAM_NAMES)("valid title should not trigger (%s)", async (paramName) => {
    const definition = {
      actions: {
        [ACTION_NAME]: { output: { schema: { properties: { [paramName]: { [ZUI]: { title: TRUTHY_STRING } } } } } }
      }
    };
    const results = await lint(definition);
    (0, import_vitest.expect)(results).toHaveLength(0);
  });
});
describeRule("action-outputparams-must-have-a-description", (lint) => {
  import_vitest.test.each(PARAM_NAMES)("missing description should trigger (%s)", async (paramName) => {
    const definition = {
      actions: { [ACTION_NAME]: { output: { schema: { properties: { [paramName]: {} } } } } }
    };
    const results = await lint(definition);
    (0, import_vitest.expect)(results).toHaveLength(1);
    (0, import_vitest.expect)(results[0]?.path).toEqual(["actions", ACTION_NAME, "output", "schema", "properties", paramName]);
    (0, import_vitest.expect)(results[0]?.message).toContain("description");
  });
  import_vitest.test.each(PARAM_NAMES)("empty description should trigger (%s)", async (paramName) => {
    const definition = {
      actions: {
        [ACTION_NAME]: { output: { schema: { properties: { [paramName]: { description: EMPTY_STRING } } } } }
      }
    };
    const results = await lint(definition);
    (0, import_vitest.expect)(results).toHaveLength(1);
    (0, import_vitest.expect)(results[0]?.path).toEqual([
      "actions",
      ACTION_NAME,
      "output",
      "schema",
      "properties",
      paramName,
      "description"
    ]);
    (0, import_vitest.expect)(results[0]?.message).toContain("description");
  });
  import_vitest.test.each(PARAM_NAMES)("valid description should not trigger (%s)", async (paramName) => {
    const definition = {
      actions: {
        [ACTION_NAME]: { output: { schema: { properties: { [paramName]: { description: TRUTHY_STRING } } } } }
      }
    };
    const results = await lint(definition);
    (0, import_vitest.expect)(results).toHaveLength(0);
  });
});
describeRule("event-outputparams-should-have-title", (lint) => {
  import_vitest.test.each(PARAM_NAMES)("missing title should trigger (%s)", async (paramName) => {
    const definition = {
      events: { [EVENT_NAME]: { schema: { properties: { [paramName]: { [ZUI]: {} } } } } }
    };
    const results = await lint(definition);
    (0, import_vitest.expect)(results).toHaveLength(1);
    (0, import_vitest.expect)(results[0]?.path).toEqual(["events", EVENT_NAME, "schema", "properties", paramName, ZUI]);
    (0, import_vitest.expect)(results[0]?.message).toContain("title");
  });
  import_vitest.test.each(PARAM_NAMES)("empty title should trigger (%s)", async (paramName) => {
    const definition = {
      events: {
        [EVENT_NAME]: { schema: { properties: { [paramName]: { [ZUI]: { title: EMPTY_STRING } } } } }
      }
    };
    const results = await lint(definition);
    (0, import_vitest.expect)(results).toHaveLength(1);
    (0, import_vitest.expect)(results[0]?.path).toEqual(["events", EVENT_NAME, "schema", "properties", paramName, ZUI, "title"]);
    (0, import_vitest.expect)(results[0]?.message).toContain("title");
  });
  import_vitest.test.each(PARAM_NAMES)("valid title should not trigger (%s)", async (paramName) => {
    const definition = {
      events: {
        [EVENT_NAME]: { schema: { properties: { [paramName]: { [ZUI]: { title: TRUTHY_STRING } } } } }
      }
    };
    const results = await lint(definition);
    (0, import_vitest.expect)(results).toHaveLength(0);
  });
});
describeRule("event-outputparams-must-have-description", (lint) => {
  import_vitest.test.each(PARAM_NAMES)("missing description should trigger (%s)", async (paramName) => {
    const definition = {
      events: { [EVENT_NAME]: { schema: { properties: { [paramName]: {} } } } }
    };
    const results = await lint(definition);
    (0, import_vitest.expect)(results).toHaveLength(1);
    (0, import_vitest.expect)(results[0]?.path).toEqual(["events", EVENT_NAME, "schema", "properties", paramName]);
    (0, import_vitest.expect)(results[0]?.message).toContain("description");
  });
  import_vitest.test.each(PARAM_NAMES)("empty description should trigger (%s)", async (paramName) => {
    const definition = {
      events: {
        [EVENT_NAME]: { schema: { properties: { [paramName]: { description: EMPTY_STRING } } } }
      }
    };
    const results = await lint(definition);
    (0, import_vitest.expect)(results).toHaveLength(1);
    (0, import_vitest.expect)(results[0]?.path).toEqual(["events", EVENT_NAME, "schema", "properties", paramName, "description"]);
    (0, import_vitest.expect)(results[0]?.message).toContain("description");
  });
  import_vitest.test.each(PARAM_NAMES)("valid description should not trigger (%s)", async (paramName) => {
    const definition = {
      events: {
        [EVENT_NAME]: { schema: { properties: { [paramName]: { description: TRUTHY_STRING } } } }
      }
    };
    const results = await lint(definition);
    (0, import_vitest.expect)(results).toHaveLength(0);
  });
});
describeRule("legacy-zui-title-should-be-removed", (lint) => {
  import_vitest.test.each(PARAM_NAMES)("legacy zui title should trigger (%s)", async (paramName) => {
    const definition = {
      actions: {
        [ACTION_NAME]: { input: { [LEGACY_ZUI]: { [paramName]: { title: TRUTHY_STRING } }, schema: {} } }
      },
      events: { [EVENT_NAME]: { [LEGACY_ZUI]: { [paramName]: { title: TRUTHY_STRING } }, schema: {} } },
      channels: {
        [CHANNEL_NAME]: {
          messages: { [MESSAGE_TYPE]: { [LEGACY_ZUI]: { [paramName]: { title: TRUTHY_STRING } }, schema: {} } }
        }
      },
      entities: { [ENTITY_NAME]: { [LEGACY_ZUI]: { [paramName]: { title: TRUTHY_STRING } }, schema: {} } }
    };
    const results = await lint(definition);
    (0, import_vitest.expect)(results).toHaveLength(4);
    (0, import_vitest.expect)(results[0]?.message).toContain(".title()");
  });
});
describeRule("legacy-zui-examples-should-be-removed", (lint) => {
  import_vitest.test.each(PARAM_NAMES)("legacy zui examples should trigger (%s)", async (paramName) => {
    const definition = {
      actions: {
        [ACTION_NAME]: { input: { [LEGACY_ZUI]: { [paramName]: { examples: [TRUTHY_STRING] } }, schema: {} } }
      },
      events: { [EVENT_NAME]: { [LEGACY_ZUI]: { [paramName]: { examples: [TRUTHY_STRING] } }, schema: {} } },
      channels: {
        [CHANNEL_NAME]: {
          messages: { [MESSAGE_TYPE]: { [LEGACY_ZUI]: { [paramName]: { examples: [TRUTHY_STRING] } }, schema: {} } }
        }
      },
      entities: { [ENTITY_NAME]: { [LEGACY_ZUI]: { [paramName]: { examples: [TRUTHY_STRING] } }, schema: {} } }
    };
    const results = await lint(definition);
    (0, import_vitest.expect)(results).toHaveLength(4);
    (0, import_vitest.expect)(results[0]?.message).toContain("examples");
  });
});
describeRule("entities-should-have-a-title", (lint) => {
  (0, import_vitest.test)("missing title should trigger", async () => {
    const definition = {
      entities: { [ENTITY_NAME]: {} }
    };
    const results = await lint(definition);
    (0, import_vitest.expect)(results).toHaveLength(1);
    (0, import_vitest.expect)(results[0]?.path).toEqual(["entities", ENTITY_NAME]);
    (0, import_vitest.expect)(results[0]?.message).toContain("title");
  });
  (0, import_vitest.test)("empty title should trigger", async () => {
    const definition = {
      entities: { [ENTITY_NAME]: { title: EMPTY_STRING } }
    };
    const results = await lint(definition);
    (0, import_vitest.expect)(results).toHaveLength(1);
    (0, import_vitest.expect)(results[0]?.path).toEqual(["entities", ENTITY_NAME, "title"]);
    (0, import_vitest.expect)(results[0]?.message).toContain("title");
  });
  (0, import_vitest.test)("valid title should not trigger", async () => {
    const definition = {
      entities: { [ENTITY_NAME]: { title: TRUTHY_STRING } }
    };
    const results = await lint(definition);
    (0, import_vitest.expect)(results).toHaveLength(0);
  });
});
describeRule("entities-must-have-a-description", (lint) => {
  (0, import_vitest.test)("missing description should trigger", async () => {
    const definition = {
      entities: { [ENTITY_NAME]: {} }
    };
    const results = await lint(definition);
    (0, import_vitest.expect)(results).toHaveLength(1);
    (0, import_vitest.expect)(results[0]?.path).toEqual(["entities", ENTITY_NAME]);
    (0, import_vitest.expect)(results[0]?.message).toContain("description");
  });
  (0, import_vitest.test)("empty description should trigger", async () => {
    const definition = {
      entities: { [ENTITY_NAME]: { description: EMPTY_STRING } }
    };
    const results = await lint(definition);
    (0, import_vitest.expect)(results).toHaveLength(1);
    (0, import_vitest.expect)(results[0]?.path).toEqual(["entities", ENTITY_NAME, "description"]);
    (0, import_vitest.expect)(results[0]?.message).toContain("description");
  });
  (0, import_vitest.test)("valid description should not trigger", async () => {
    const definition = {
      entities: { [ENTITY_NAME]: { description: TRUTHY_STRING } }
    };
    const results = await lint(definition);
    (0, import_vitest.expect)(results).toHaveLength(0);
  });
});
describeRule("entity-fields-should-have-a-title", (lint) => {
  import_vitest.test.each(PARAM_NAMES)("missing title should trigger (%s)", async (paramName) => {
    const definition = {
      entities: { [ENTITY_NAME]: { schema: { properties: { [paramName]: { [ZUI]: {} } } } } }
    };
    const results = await lint(definition);
    (0, import_vitest.expect)(results).toHaveLength(1);
    (0, import_vitest.expect)(results[0]?.path).toEqual(["entities", ENTITY_NAME, "schema", "properties", paramName, ZUI]);
    (0, import_vitest.expect)(results[0]?.message).toContain("title");
  });
  import_vitest.test.each(PARAM_NAMES)("empty title should trigger (%s)", async (paramName) => {
    const definition = {
      entities: {
        [ENTITY_NAME]: { schema: { properties: { [paramName]: { [ZUI]: { title: EMPTY_STRING } } } } }
      }
    };
    const results = await lint(definition);
    (0, import_vitest.expect)(results).toHaveLength(1);
    (0, import_vitest.expect)(results[0]?.path).toEqual(["entities", ENTITY_NAME, "schema", "properties", paramName, ZUI, "title"]);
    (0, import_vitest.expect)(results[0]?.message).toContain("title");
  });
  import_vitest.test.each(PARAM_NAMES)("valid title should not trigger (%s)", async (paramName) => {
    const definition = {
      entities: {
        [ENTITY_NAME]: { schema: { properties: { [paramName]: { [ZUI]: { title: TRUTHY_STRING } } } } }
      }
    };
    const results = await lint(definition);
    (0, import_vitest.expect)(results).toHaveLength(0);
  });
});
describeRule("entity-fields-must-have-a-description", (lint) => {
  import_vitest.test.each(PARAM_NAMES)("missing description should trigger (%s)", async (paramName) => {
    const definition = {
      entities: { [ENTITY_NAME]: { schema: { properties: { [paramName]: {} } } } }
    };
    const results = await lint(definition);
    (0, import_vitest.expect)(results).toHaveLength(1);
    (0, import_vitest.expect)(results[0]?.path).toEqual(["entities", ENTITY_NAME, "schema", "properties", paramName]);
    (0, import_vitest.expect)(results[0]?.message).toContain("description");
  });
  import_vitest.test.each(PARAM_NAMES)("empty description should trigger (%s)", async (paramName) => {
    const definition = {
      entities: {
        [ENTITY_NAME]: { schema: { properties: { [paramName]: { description: EMPTY_STRING } } } }
      }
    };
    const results = await lint(definition);
    (0, import_vitest.expect)(results).toHaveLength(1);
    (0, import_vitest.expect)(results[0]?.path).toEqual(["entities", ENTITY_NAME, "schema", "properties", paramName, "description"]);
    (0, import_vitest.expect)(results[0]?.message).toContain("description");
  });
  import_vitest.test.each(PARAM_NAMES)("valid description should not trigger (%s)", async (paramName) => {
    const definition = {
      entities: {
        [ENTITY_NAME]: { schema: { properties: { [paramName]: { description: TRUTHY_STRING } } } }
      }
    };
    const results = await lint(definition);
    (0, import_vitest.expect)(results).toHaveLength(0);
  });
});
//# sourceMappingURL=interface.ruleset.test.js.map
