"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var base_linter_exports = {};
__export(base_linter_exports, {
  BaseLinter: () => BaseLinter
});
module.exports = __toCommonJS(base_linter_exports);
var import_spectral_core = require("@stoplight/spectral-core");
var import_spectral_parsers = require("@stoplight/spectral-parsers");
class BaseLinter {
  _spectral;
  _spectralDocument;
  _results = [];
  constructor(definition, ruleset) {
    const json = JSON.stringify(definition);
    this._spectralDocument = new import_spectral_core.Document(json, import_spectral_parsers.Json);
    this._spectral = new import_spectral_core.Spectral();
    this._spectral.setRuleset(ruleset);
  }
  async lint() {
    this._results = await this._spectral.run(this._spectralDocument);
  }
  logResults(logger) {
    for (const result of this.getSortedResults()) {
      const message = `${result.path}: ${result.message}`;
      this._logResultMessage(logger, message, result.severity);
    }
  }
  getSortedResults() {
    return this._getResults().sort((a, b) => a.path > b.path ? 1 : a.path < b.path ? -1 : 0);
  }
  hasErrors() {
    return this._results.some((result) => result.severity === 0);
  }
  _getResults() {
    return this._results.map((result) => ({
      message: result.message,
      path: this._simplifyPath(result.path),
      severity: result.severity
    }));
  }
  _simplifyPath(path) {
    return path.join(".").replaceAll(".properties.", ".").replaceAll(".x-zui", "");
  }
  _logResultMessage(logger, message, severity) {
    const logLevelMapping = {
      0: logger.error,
      1: logger.warn,
      2: logger.log,
      3: logger.debug
    };
    logLevelMapping[severity].call(logger, message);
  }
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  BaseLinter
});
//# sourceMappingURL=base-linter.js.map
