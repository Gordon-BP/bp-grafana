{
  "version": 3,
  "sources": ["../../src/command-implementations/gen-command.ts"],
  "sourcesContent": ["import * as sdk from '@botpress/sdk'\nimport chalk from 'chalk'\nimport fslib from 'fs'\nimport pathlib from 'path'\nimport * as codegen from '../code-generation'\nimport type commandDefinitions from '../command-definitions'\nimport * as errors from '../errors'\nimport * as utils from '../utils'\nimport { ProjectCommand } from './project-command'\n\nexport type GenerateCommandDefinition = typeof commandDefinitions.generate\nexport class GenerateCommand extends ProjectCommand<GenerateCommandDefinition> {\n  public async run(): Promise<void> {\n    const projectDef = await this.readProjectDefinitionFromFS()\n    if (projectDef.type === 'interface') {\n      this.logger.success('Interface projects have no code to generate since they have no implementation.')\n      return\n    }\n    if (projectDef.type === 'integration') {\n      return await this._generateIntegration(projectDef.definition)\n    }\n    if (projectDef.type === 'bot') {\n      return await this._generateBot(projectDef.definition)\n    }\n    throw new errors.UnsupportedProjectType()\n  }\n\n  private async _generateIntegration(integrationDef: sdk.IntegrationDefinition): Promise<void> {\n    this._validateSecrets(integrationDef)\n\n    const line = this.logger.line()\n\n    const { name } = integrationDef\n    line.started(`Generating typings for integration ${chalk.bold(name)}...`)\n\n    const fromWorkDir = this.projectPaths.rel('workDir')\n\n    const generatedFiles = await codegen.generateIntegrationImplementation(integrationDef)\n\n    await this._writeGeneratedFilesToOutFolder(generatedFiles)\n\n    line.success(`Typings available at ${chalk.grey(fromWorkDir.outDir)}`)\n  }\n\n  private async _generateBot(botDefinition: sdk.BotDefinition): Promise<void> {\n    const line = this.logger.line()\n\n    line.started('Generating typings for bot...')\n\n    const fromWorkDir = this.projectPaths.rel('workDir')\n\n    const generatedFiles = await codegen.generateBotImplementation(botDefinition)\n\n    await this._writeGeneratedFilesToOutFolder(generatedFiles)\n\n    line.success(`Typings available at ${chalk.grey(fromWorkDir.outDir)}`)\n  }\n\n  private async _writeGeneratedFilesToOutFolder(files: codegen.File[]) {\n    for (const file of files) {\n      const filePath = utils.path.absoluteFrom(this.projectPaths.abs.outDir, file.path)\n      const dirPath = pathlib.dirname(filePath)\n      await fslib.promises.mkdir(dirPath, { recursive: true })\n      await fslib.promises.writeFile(filePath, file.content)\n    }\n  }\n\n  private _validateSecrets(integrationDef: sdk.IntegrationDefinition): void {\n    const { secrets } = integrationDef\n    if (!secrets) {\n      return\n    }\n\n    for (const secretName in secrets) {\n      if (!utils.casing.is.screamingSnakeCase(secretName)) {\n        throw new errors.BotpressCLIError(`Secret ${secretName} should be in SCREAMING_SNAKE_CASE`)\n      }\n    }\n  }\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AACA,mBAAkB;AAClB,gBAAkB;AAClB,kBAAoB;AACpB,cAAyB;AAEzB,aAAwB;AACxB,YAAuB;AACvB,6BAA+B;AAGxB,MAAM,wBAAwB,sCAA0C;AAAA,EAC7E,MAAa,MAAqB;AAChC,UAAM,aAAa,MAAM,KAAK,4BAA4B;AAC1D,QAAI,WAAW,SAAS,aAAa;AACnC,WAAK,OAAO,QAAQ,gFAAgF;AACpG;AAAA,IACF;AACA,QAAI,WAAW,SAAS,eAAe;AACrC,aAAO,MAAM,KAAK,qBAAqB,WAAW,UAAU;AAAA,IAC9D;AACA,QAAI,WAAW,SAAS,OAAO;AAC7B,aAAO,MAAM,KAAK,aAAa,WAAW,UAAU;AAAA,IACtD;AACA,UAAM,IAAI,OAAO,uBAAuB;AAAA,EAC1C;AAAA,EAEA,MAAc,qBAAqB,gBAA0D;AAC3F,SAAK,iBAAiB,cAAc;AAEpC,UAAM,OAAO,KAAK,OAAO,KAAK;AAE9B,UAAM,EAAE,KAAK,IAAI;AACjB,SAAK,QAAQ,sCAAsC,aAAAA,QAAM,KAAK,IAAI,MAAM;AAExE,UAAM,cAAc,KAAK,aAAa,IAAI,SAAS;AAEnD,UAAM,iBAAiB,MAAM,QAAQ,kCAAkC,cAAc;AAErF,UAAM,KAAK,gCAAgC,cAAc;AAEzD,SAAK,QAAQ,wBAAwB,aAAAA,QAAM,KAAK,YAAY,MAAM,GAAG;AAAA,EACvE;AAAA,EAEA,MAAc,aAAa,eAAiD;AAC1E,UAAM,OAAO,KAAK,OAAO,KAAK;AAE9B,SAAK,QAAQ,+BAA+B;AAE5C,UAAM,cAAc,KAAK,aAAa,IAAI,SAAS;AAEnD,UAAM,iBAAiB,MAAM,QAAQ,0BAA0B,aAAa;AAE5E,UAAM,KAAK,gCAAgC,cAAc;AAEzD,SAAK,QAAQ,wBAAwB,aAAAA,QAAM,KAAK,YAAY,MAAM,GAAG;AAAA,EACvE;AAAA,EAEA,MAAc,gCAAgC,OAAuB;AACnE,eAAW,QAAQ,OAAO;AACxB,YAAM,WAAW,MAAM,KAAK,aAAa,KAAK,aAAa,IAAI,QAAQ,KAAK,IAAI;AAChF,YAAM,UAAU,YAAAC,QAAQ,QAAQ,QAAQ;AACxC,YAAM,UAAAC,QAAM,SAAS,MAAM,SAAS,EAAE,WAAW,KAAK,CAAC;AACvD,YAAM,UAAAA,QAAM,SAAS,UAAU,UAAU,KAAK,OAAO;AAAA,IACvD;AAAA,EACF;AAAA,EAEQ,iBAAiB,gBAAiD;AACxE,UAAM,EAAE,QAAQ,IAAI;AACpB,QAAI,CAAC,SAAS;AACZ;AAAA,IACF;AAEA,eAAW,cAAc,SAAS;AAChC,UAAI,CAAC,MAAM,OAAO,GAAG,mBAAmB,UAAU,GAAG;AACnD,cAAM,IAAI,OAAO,iBAAiB,UAAU,8CAA8C;AAAA,MAC5F;AAAA,IACF;AAAA,EACF;AACF;",
  "names": ["chalk", "pathlib", "fslib"]
}
