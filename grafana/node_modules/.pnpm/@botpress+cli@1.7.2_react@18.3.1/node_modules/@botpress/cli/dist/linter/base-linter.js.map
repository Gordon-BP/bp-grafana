{
  "version": 3,
  "sources": ["../../src/linter/base-linter.ts"],
  "sourcesContent": ["import { Spectral, Document, type ISpectralDiagnostic, type RulesetDefinition } from '@stoplight/spectral-core'\nimport { Json as JsonParser, type JsonParserResult } from '@stoplight/spectral-parsers'\nimport { type Logger } from '../logger'\n\ntype ProblemSeverity = 0 | 1 | 2 | 3\n\nexport abstract class BaseLinter<TDefinition> {\n  private readonly _spectral: Spectral\n  private readonly _spectralDocument: Document<unknown, JsonParserResult<unknown>>\n  private _results: ISpectralDiagnostic[] = []\n\n  protected constructor(definition: TDefinition, ruleset: RulesetDefinition) {\n    const json = JSON.stringify(definition)\n    this._spectralDocument = new Document(json, JsonParser)\n    this._spectral = new Spectral()\n    this._spectral.setRuleset(ruleset)\n  }\n\n  public async lint(): Promise<void> {\n    this._results = await this._spectral.run(this._spectralDocument)\n  }\n\n  public logResults(logger: Logger) {\n    for (const result of this.getSortedResults()) {\n      const message = `${result.path}: ${result.message}`\n\n      this._logResultMessage(logger, message, result.severity)\n    }\n  }\n\n  public getSortedResults() {\n    return this._getResults().sort((a, b) => (a.path > b.path ? 1 : a.path < b.path ? -1 : 0))\n  }\n\n  public hasErrors() {\n    return this._results.some((result) => result.severity === 0)\n  }\n\n  private _getResults() {\n    return this._results.map((result) => ({\n      message: result.message,\n      path: this._simplifyPath(result.path),\n      severity: result.severity as ProblemSeverity,\n    }))\n  }\n\n  private _simplifyPath(path: (string | number)[]) {\n    return path.join('.').replaceAll('.properties.', '.').replaceAll('.x-zui', '')\n  }\n\n  private _logResultMessage(logger: Logger, message: string, severity: ProblemSeverity) {\n    const logLevelMapping = {\n      0: logger.error,\n      1: logger.warn,\n      2: logger.log,\n      3: logger.debug,\n    } as const\n\n    logLevelMapping[severity].call(logger, message)\n  }\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2BAAqF;AACrF,8BAA0D;AAKnD,MAAe,WAAwB;AAAA,EAC3B;AAAA,EACA;AAAA,EACT,WAAkC,CAAC;AAAA,EAEjC,YAAY,YAAyB,SAA4B;AACzE,UAAM,OAAO,KAAK,UAAU,UAAU;AACtC,SAAK,oBAAoB,IAAI,8BAAS,MAAM,wBAAAA,IAAU;AACtD,SAAK,YAAY,IAAI,8BAAS;AAC9B,SAAK,UAAU,WAAW,OAAO;AAAA,EACnC;AAAA,EAEA,MAAa,OAAsB;AACjC,SAAK,WAAW,MAAM,KAAK,UAAU,IAAI,KAAK,iBAAiB;AAAA,EACjE;AAAA,EAEO,WAAW,QAAgB;AAChC,eAAW,UAAU,KAAK,iBAAiB,GAAG;AAC5C,YAAM,UAAU,GAAG,OAAO,SAAS,OAAO;AAE1C,WAAK,kBAAkB,QAAQ,SAAS,OAAO,QAAQ;AAAA,IACzD;AAAA,EACF;AAAA,EAEO,mBAAmB;AACxB,WAAO,KAAK,YAAY,EAAE,KAAK,CAAC,GAAG,MAAO,EAAE,OAAO,EAAE,OAAO,IAAI,EAAE,OAAO,EAAE,OAAO,KAAK,CAAE;AAAA,EAC3F;AAAA,EAEO,YAAY;AACjB,WAAO,KAAK,SAAS,KAAK,CAAC,WAAW,OAAO,aAAa,CAAC;AAAA,EAC7D;AAAA,EAEQ,cAAc;AACpB,WAAO,KAAK,SAAS,IAAI,CAAC,YAAY;AAAA,MACpC,SAAS,OAAO;AAAA,MAChB,MAAM,KAAK,cAAc,OAAO,IAAI;AAAA,MACpC,UAAU,OAAO;AAAA,IACnB,EAAE;AAAA,EACJ;AAAA,EAEQ,cAAc,MAA2B;AAC/C,WAAO,KAAK,KAAK,GAAG,EAAE,WAAW,gBAAgB,GAAG,EAAE,WAAW,UAAU,EAAE;AAAA,EAC/E;AAAA,EAEQ,kBAAkB,QAAgB,SAAiB,UAA2B;AACpF,UAAM,kBAAkB;AAAA,MACtB,GAAG,OAAO;AAAA,MACV,GAAG,OAAO;AAAA,MACV,GAAG,OAAO;AAAA,MACV,GAAG,OAAO;AAAA,IACZ;AAEA,oBAAgB,UAAU,KAAK,QAAQ,OAAO;AAAA,EAChD;AACF;",
  "names": ["JsonParser"]
}
