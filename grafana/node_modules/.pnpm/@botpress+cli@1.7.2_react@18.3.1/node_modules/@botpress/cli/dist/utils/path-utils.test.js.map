{
  "version": 3,
  "sources": ["../../src/utils/path-utils.test.ts"],
  "sourcesContent": ["import { test, expect, describe } from 'vitest'\nimport * as pathUtils from './path-utils'\n\ndescribe('posix', () => {\n  test('isPath with valid relative path should return true', () => {\n    expect(pathUtils.posix.isPath('./src')).toBe(true)\n    expect(pathUtils.posix.isPath('../src')).toBe(true)\n    expect(pathUtils.posix.isPath('./src/services')).toBe(true)\n    expect(pathUtils.posix.isPath('./src/services/index.ts')).toBe(true)\n    expect(pathUtils.posix.isPath('./.././.././../lol.json')).toBe(true)\n  })\n\n  test('isPath with valid absolute path should return true', () => {\n    expect(pathUtils.posix.isPath('/src')).toBe(true)\n    expect(pathUtils.posix.isPath('/src')).toBe(true)\n    expect(pathUtils.posix.isPath('/src/services')).toBe(true)\n    expect(pathUtils.posix.isPath('/src/services/index.ts')).toBe(true)\n  })\n\n  test('isPath with invalid path should return false', () => {\n    // these are technically valid posix paths, but not for the bp cli\n    expect(pathUtils.posix.isPath('src')).toBe(false)\n    expect(pathUtils.posix.isPath('.src')).toBe(false)\n    expect(pathUtils.posix.isPath('..src')).toBe(false)\n    expect(pathUtils.posix.isPath('src/services')).toBe(false)\n    expect(pathUtils.posix.isPath('src/services/index.ts')).toBe(false)\n  })\n})\n\ndescribe('win32', () => {\n  test('isPath with valid relative path should return true', () => {\n    expect(pathUtils.win32.isPath('.\\\\src')).toBe(true)\n    expect(pathUtils.win32.isPath('..\\\\src')).toBe(true)\n    expect(pathUtils.win32.isPath('.\\\\src\\\\services')).toBe(true)\n    expect(pathUtils.win32.isPath('.\\\\src\\\\services\\\\index.ts')).toBe(true)\n    expect(pathUtils.win32.isPath('.\\\\..\\\\.\\\\..\\\\.\\\\..\\\\lol.json')).toBe(true)\n  })\n\n  test('isPath with valid absolute path should return true', () => {\n    expect(pathUtils.win32.isPath('C:\\\\src')).toBe(true)\n    expect(pathUtils.win32.isPath('C:\\\\src')).toBe(true)\n    expect(pathUtils.win32.isPath('C:\\\\src\\\\services')).toBe(true)\n    expect(pathUtils.win32.isPath('C:\\\\src\\\\services\\\\index.ts')).toBe(true)\n  })\n\n  test('isPath with invalid path should return false', () => {\n    // these are technically valid win32 paths, but not for the bp cli\n    expect(pathUtils.win32.isPath('src')).toBe(false)\n    expect(pathUtils.win32.isPath('.src')).toBe(false)\n    expect(pathUtils.win32.isPath('..src')).toBe(false)\n    expect(pathUtils.win32.isPath('src\\\\services')).toBe(false)\n    expect(pathUtils.win32.isPath('src\\\\services\\\\index.ts')).toBe(false)\n    expect(pathUtils.win32.isPath('\\\\services')).toBe(false)\n    expect(pathUtils.win32.isPath('\\\\services\\\\index.ts')).toBe(false)\n  })\n})\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;AAAA,oBAAuC;AACvC,gBAA2B;AAAA,IAE3B,wBAAS,SAAS,MAAM;AACtB,0BAAK,sDAAsD,MAAM;AAC/D,8BAAO,UAAU,MAAM,OAAO,OAAO,CAAC,EAAE,KAAK,IAAI;AACjD,8BAAO,UAAU,MAAM,OAAO,QAAQ,CAAC,EAAE,KAAK,IAAI;AAClD,8BAAO,UAAU,MAAM,OAAO,gBAAgB,CAAC,EAAE,KAAK,IAAI;AAC1D,8BAAO,UAAU,MAAM,OAAO,yBAAyB,CAAC,EAAE,KAAK,IAAI;AACnE,8BAAO,UAAU,MAAM,OAAO,yBAAyB,CAAC,EAAE,KAAK,IAAI;AAAA,EACrE,CAAC;AAED,0BAAK,sDAAsD,MAAM;AAC/D,8BAAO,UAAU,MAAM,OAAO,MAAM,CAAC,EAAE,KAAK,IAAI;AAChD,8BAAO,UAAU,MAAM,OAAO,MAAM,CAAC,EAAE,KAAK,IAAI;AAChD,8BAAO,UAAU,MAAM,OAAO,eAAe,CAAC,EAAE,KAAK,IAAI;AACzD,8BAAO,UAAU,MAAM,OAAO,wBAAwB,CAAC,EAAE,KAAK,IAAI;AAAA,EACpE,CAAC;AAED,0BAAK,gDAAgD,MAAM;AAEzD,8BAAO,UAAU,MAAM,OAAO,KAAK,CAAC,EAAE,KAAK,KAAK;AAChD,8BAAO,UAAU,MAAM,OAAO,MAAM,CAAC,EAAE,KAAK,KAAK;AACjD,8BAAO,UAAU,MAAM,OAAO,OAAO,CAAC,EAAE,KAAK,KAAK;AAClD,8BAAO,UAAU,MAAM,OAAO,cAAc,CAAC,EAAE,KAAK,KAAK;AACzD,8BAAO,UAAU,MAAM,OAAO,uBAAuB,CAAC,EAAE,KAAK,KAAK;AAAA,EACpE,CAAC;AACH,CAAC;AAAA,IAED,wBAAS,SAAS,MAAM;AACtB,0BAAK,sDAAsD,MAAM;AAC/D,8BAAO,UAAU,MAAM,OAAO,QAAQ,CAAC,EAAE,KAAK,IAAI;AAClD,8BAAO,UAAU,MAAM,OAAO,SAAS,CAAC,EAAE,KAAK,IAAI;AACnD,8BAAO,UAAU,MAAM,OAAO,kBAAkB,CAAC,EAAE,KAAK,IAAI;AAC5D,8BAAO,UAAU,MAAM,OAAO,4BAA4B,CAAC,EAAE,KAAK,IAAI;AACtE,8BAAO,UAAU,MAAM,OAAO,+BAA+B,CAAC,EAAE,KAAK,IAAI;AAAA,EAC3E,CAAC;AAED,0BAAK,sDAAsD,MAAM;AAC/D,8BAAO,UAAU,MAAM,OAAO,SAAS,CAAC,EAAE,KAAK,IAAI;AACnD,8BAAO,UAAU,MAAM,OAAO,SAAS,CAAC,EAAE,KAAK,IAAI;AACnD,8BAAO,UAAU,MAAM,OAAO,mBAAmB,CAAC,EAAE,KAAK,IAAI;AAC7D,8BAAO,UAAU,MAAM,OAAO,6BAA6B,CAAC,EAAE,KAAK,IAAI;AAAA,EACzE,CAAC;AAED,0BAAK,gDAAgD,MAAM;AAEzD,8BAAO,UAAU,MAAM,OAAO,KAAK,CAAC,EAAE,KAAK,KAAK;AAChD,8BAAO,UAAU,MAAM,OAAO,MAAM,CAAC,EAAE,KAAK,KAAK;AACjD,8BAAO,UAAU,MAAM,OAAO,OAAO,CAAC,EAAE,KAAK,KAAK;AAClD,8BAAO,UAAU,MAAM,OAAO,eAAe,CAAC,EAAE,KAAK,KAAK;AAC1D,8BAAO,UAAU,MAAM,OAAO,yBAAyB,CAAC,EAAE,KAAK,KAAK;AACpE,8BAAO,UAAU,MAAM,OAAO,YAAY,CAAC,EAAE,KAAK,KAAK;AACvD,8BAAO,UAAU,MAAM,OAAO,sBAAsB,CAAC,EAAE,KAAK,KAAK;AAAA,EACnE,CAAC;AACH,CAAC;",
  "names": []
}
