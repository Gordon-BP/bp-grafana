{
  "version": 3,
  "sources": ["../../src/api/client.ts"],
  "sourcesContent": ["import * as client from '@botpress/client'\nimport semver from 'semver'\nimport yn from 'yn'\nimport type { Logger } from '../logger'\nimport { formatPackageRef, ApiPackageRef, NamePackageRef, isLatest } from '../package-ref'\nimport { findPreviousIntegrationVersion } from './find-previous-version'\nimport * as paging from './paging'\n\nimport {\n  ApiClientProps,\n  PublicIntegration,\n  PrivateIntegration,\n  Integration,\n  Requests,\n  Responses,\n  Interface,\n  BotSummary,\n} from './types'\n\nexport * from './types'\n\n/**\n * This class is used to wrap the Botpress API and provide a more convenient way to interact with it.\n */\nexport class ApiClient {\n  public readonly client: client.Client\n  public readonly url: string\n  public readonly token: string\n  public readonly workspaceId: string\n\n  public static newClient = (props: ApiClientProps, logger: Logger) => new ApiClient(props, logger)\n\n  public constructor(props: ApiClientProps, private _logger: Logger) {\n    const { apiUrl, token, workspaceId } = props\n    this.client = new client.Client({ apiUrl, token, workspaceId })\n    this.url = apiUrl\n    this.token = token\n    this.workspaceId = workspaceId\n  }\n\n  public get isBotpressWorkspace(): boolean {\n    // this environment variable is undocumented and only used internally for dev purposes\n    const isBotpressWorkspace = yn(process.env.BP_IS_BOTPRESS_WORKSPACE)\n    if (isBotpressWorkspace !== undefined) {\n      return isBotpressWorkspace\n    }\n    return [\n      '6a76fa10-e150-4ff6-8f59-a300feec06c1',\n      '95de33eb-1551-4af9-9088-e5dcb02efd09',\n      '11111111-1111-1111-aaaa-111111111111',\n    ].includes(this.workspaceId)\n  }\n\n  public async getWorkspace(): Promise<Responses['getWorkspace']> {\n    return this.client.getWorkspace({ id: this.workspaceId })\n  }\n\n  public async updateWorkspace(props: Omit<Requests['updateWorkspace'], 'id'>): Promise<Responses['updateWorkspace']> {\n    return this.client.updateWorkspace({ id: this.workspaceId, ...props })\n  }\n\n  public async findIntegration(ref: ApiPackageRef): Promise<Integration | undefined> {\n    const formatted = formatPackageRef(ref)\n\n    const privateIntegration = await this.findPrivateIntegration(ref)\n    if (privateIntegration) {\n      this._logger.debug(`Found integration \"${formatted}\" in workspace`)\n      return privateIntegration\n    }\n\n    const publicIntegration = await this.findPublicIntegration(ref)\n    if (publicIntegration) {\n      this._logger.debug(`Found integration \"${formatted}\" in hub`)\n      return publicIntegration\n    }\n\n    return\n  }\n\n  public async findPrivateIntegration(ref: ApiPackageRef): Promise<PrivateIntegration | undefined> {\n    const { workspaceId } = this\n    if (ref.type === 'id') {\n      return this.client\n        .getIntegration(ref)\n        .then((r) => ({ ...r.integration, workspaceId }))\n        .catch(this._returnUndefinedOnError('ResourceNotFound'))\n    }\n    return this.client\n      .getIntegrationByName(ref)\n      .then((r) => ({ ...r.integration, workspaceId }))\n      .catch(this._returnUndefinedOnError('ResourceNotFound'))\n  }\n\n  public async findPublicIntegration(ref: ApiPackageRef): Promise<PublicIntegration | undefined> {\n    if (ref.type === 'id') {\n      return this.client\n        .getPublicIntegrationById(ref)\n        .then((r) => r.integration)\n        .catch(this._returnUndefinedOnError('ResourceNotFound'))\n    }\n    return this.client\n      .getPublicIntegration(ref)\n      .then((r) => r.integration)\n      .catch(this._returnUndefinedOnError('ResourceNotFound'))\n  }\n\n  public async findPublicInterface(ref: ApiPackageRef): Promise<Interface | undefined> {\n    if (ref.type === 'id') {\n      return this.client\n        .getInterface(ref)\n        .then((r) => r.interface)\n        .catch(this._returnUndefinedOnError('ResourceNotFound'))\n    }\n\n    if (isLatest(ref)) {\n      // TODO: handle latest keyword in backend\n      return this._findLatestInterfaceVersion(ref)\n    }\n\n    return this.client\n      .getInterfaceByName(ref)\n      .then((r) => r.interface)\n      .catch(this._returnUndefinedOnError('ResourceNotFound'))\n  }\n\n  private _findLatestInterfaceVersion = async ({ name }: NamePackageRef): Promise<Interface | undefined> => {\n    const { interfaces: allVersions } = await this.client.listInterfaces({ name })\n    const sorted = allVersions.sort((a, b) => semver.compare(b.version, a.version))\n    const latestVersion = sorted[0]\n    if (!latestVersion) {\n      return\n    }\n    return this.client.getInterface({ id: latestVersion.id }).then((r) => r.interface)\n  }\n\n  public async testLogin(): Promise<void> {\n    await this.client.listBots({})\n  }\n\n  public listAllPages = paging.listAllPages\n\n  public async findPreviousIntegrationVersion(ref: NamePackageRef): Promise<Integration | undefined> {\n    const previous = await findPreviousIntegrationVersion(this.client, ref)\n    if (!previous) {\n      return\n    }\n    return this.findIntegration({ type: 'id', id: previous.id })\n  }\n\n  public async findBotByName(name: string): Promise<BotSummary | undefined> {\n    // api does not allow filtering bots by name\n    const allBots = await this.listAllPages(this.client.listBots, (r) => r.bots)\n    return allBots.find((b) => b.name === name)\n  }\n\n  private _returnUndefinedOnError =\n    (type: client.ApiError['type']) =>\n    (thrown: any): undefined => {\n      if (client.isApiError(thrown) && thrown.type === type) {\n        return\n      }\n      throw thrown\n    }\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAAwB;AACxB,oBAAmB;AACnB,gBAAe;AAEf,yBAA0E;AAC1E,mCAA+C;AAC/C,aAAwB;AAaxB,2BAAc,oBAnBd;AAwBO,MAAM,UAAU;AAAA,EAQd,YAAY,OAA+B,SAAiB;AAAjB;AAChD,UAAM,EAAE,QAAQ,OAAO,YAAY,IAAI;AACvC,SAAK,SAAS,IAAI,OAAO,OAAO,EAAE,QAAQ,OAAO,YAAY,CAAC;AAC9D,SAAK,MAAM;AACX,SAAK,QAAQ;AACb,SAAK,cAAc;AAAA,EACrB;AAAA,EAbgB;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EAEhB,OAAc,YAAY,CAAC,OAAuB,WAAmB,IAAI,UAAU,OAAO,MAAM;AAAA,EAUhG,IAAW,sBAA+B;AAExC,UAAM,0BAAsB,UAAAA,SAAG,QAAQ,IAAI,wBAAwB;AACnE,QAAI,wBAAwB,QAAW;AACrC,aAAO;AAAA,IACT;AACA,WAAO;AAAA,MACL;AAAA,MACA;AAAA,MACA;AAAA,IACF,EAAE,SAAS,KAAK,WAAW;AAAA,EAC7B;AAAA,EAEA,MAAa,eAAmD;AAC9D,WAAO,KAAK,OAAO,aAAa,EAAE,IAAI,KAAK,YAAY,CAAC;AAAA,EAC1D;AAAA,EAEA,MAAa,gBAAgB,OAAuF;AAClH,WAAO,KAAK,OAAO,gBAAgB,EAAE,IAAI,KAAK,aAAa,GAAG,MAAM,CAAC;AAAA,EACvE;AAAA,EAEA,MAAa,gBAAgB,KAAsD;AACjF,UAAM,gBAAY,qCAAiB,GAAG;AAEtC,UAAM,qBAAqB,MAAM,KAAK,uBAAuB,GAAG;AAChE,QAAI,oBAAoB;AACtB,WAAK,QAAQ,MAAM,sBAAsB,yBAAyB;AAClE,aAAO;AAAA,IACT;AAEA,UAAM,oBAAoB,MAAM,KAAK,sBAAsB,GAAG;AAC9D,QAAI,mBAAmB;AACrB,WAAK,QAAQ,MAAM,sBAAsB,mBAAmB;AAC5D,aAAO;AAAA,IACT;AAEA;AAAA,EACF;AAAA,EAEA,MAAa,uBAAuB,KAA6D;AAC/F,UAAM,EAAE,YAAY,IAAI;AACxB,QAAI,IAAI,SAAS,MAAM;AACrB,aAAO,KAAK,OACT,eAAe,GAAG,EAClB,KAAK,CAAC,OAAO,EAAE,GAAG,EAAE,aAAa,YAAY,EAAE,EAC/C,MAAM,KAAK,wBAAwB,kBAAkB,CAAC;AAAA,IAC3D;AACA,WAAO,KAAK,OACT,qBAAqB,GAAG,EACxB,KAAK,CAAC,OAAO,EAAE,GAAG,EAAE,aAAa,YAAY,EAAE,EAC/C,MAAM,KAAK,wBAAwB,kBAAkB,CAAC;AAAA,EAC3D;AAAA,EAEA,MAAa,sBAAsB,KAA4D;AAC7F,QAAI,IAAI,SAAS,MAAM;AACrB,aAAO,KAAK,OACT,yBAAyB,GAAG,EAC5B,KAAK,CAAC,MAAM,EAAE,WAAW,EACzB,MAAM,KAAK,wBAAwB,kBAAkB,CAAC;AAAA,IAC3D;AACA,WAAO,KAAK,OACT,qBAAqB,GAAG,EACxB,KAAK,CAAC,MAAM,EAAE,WAAW,EACzB,MAAM,KAAK,wBAAwB,kBAAkB,CAAC;AAAA,EAC3D;AAAA,EAEA,MAAa,oBAAoB,KAAoD;AACnF,QAAI,IAAI,SAAS,MAAM;AACrB,aAAO,KAAK,OACT,aAAa,GAAG,EAChB,KAAK,CAAC,MAAM,EAAE,SAAS,EACvB,MAAM,KAAK,wBAAwB,kBAAkB,CAAC;AAAA,IAC3D;AAEA,YAAI,6BAAS,GAAG,GAAG;AAEjB,aAAO,KAAK,4BAA4B,GAAG;AAAA,IAC7C;AAEA,WAAO,KAAK,OACT,mBAAmB,GAAG,EACtB,KAAK,CAAC,MAAM,EAAE,SAAS,EACvB,MAAM,KAAK,wBAAwB,kBAAkB,CAAC;AAAA,EAC3D;AAAA,EAEQ,8BAA8B,OAAO,EAAE,KAAK,MAAsD;AACxG,UAAM,EAAE,YAAY,YAAY,IAAI,MAAM,KAAK,OAAO,eAAe,EAAE,KAAK,CAAC;AAC7E,UAAM,SAAS,YAAY,KAAK,CAAC,GAAG,MAAM,cAAAC,QAAO,QAAQ,EAAE,SAAS,EAAE,OAAO,CAAC;AAC9E,UAAM,gBAAgB,OAAO;AAC7B,QAAI,CAAC,eAAe;AAClB;AAAA,IACF;AACA,WAAO,KAAK,OAAO,aAAa,EAAE,IAAI,cAAc,GAAG,CAAC,EAAE,KAAK,CAAC,MAAM,EAAE,SAAS;AAAA,EACnF;AAAA,EAEA,MAAa,YAA2B;AACtC,UAAM,KAAK,OAAO,SAAS,CAAC,CAAC;AAAA,EAC/B;AAAA,EAEO,eAAe,OAAO;AAAA,EAE7B,MAAa,+BAA+B,KAAuD;AACjG,UAAM,WAAW,UAAM,6DAA+B,KAAK,QAAQ,GAAG;AACtE,QAAI,CAAC,UAAU;AACb;AAAA,IACF;AACA,WAAO,KAAK,gBAAgB,EAAE,MAAM,MAAM,IAAI,SAAS,GAAG,CAAC;AAAA,EAC7D;AAAA,EAEA,MAAa,cAAc,MAA+C;AAExE,UAAM,UAAU,MAAM,KAAK,aAAa,KAAK,OAAO,UAAU,CAAC,MAAM,EAAE,IAAI;AAC3E,WAAO,QAAQ,KAAK,CAAC,MAAM,EAAE,SAAS,IAAI;AAAA,EAC5C;AAAA,EAEQ,0BACN,CAAC,SACD,CAAC,WAA2B;AAC1B,QAAI,OAAO,WAAW,MAAM,KAAK,OAAO,SAAS,MAAM;AACrD;AAAA,IACF;AACA,UAAM;AAAA,EACR;AACJ;",
  "names": ["yn", "semver"]
}
