"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var interface_body_exports = {};
__export(interface_body_exports, {
  prepareCreateInterfaceBody: () => prepareCreateInterfaceBody,
  prepareUpdateInterfaceBody: () => prepareUpdateInterfaceBody
});
module.exports = __toCommonJS(interface_body_exports);
var utils = __toESM(require("../utils"));
const prepareCreateInterfaceBody = async (intrface) => ({
  name: intrface.name,
  version: intrface.version,
  entities: intrface.entities ? await utils.records.mapValuesAsync(intrface.entities, async (entity) => ({
    ...entity,
    schema: await utils.schema.mapZodToJsonSchema(entity)
  })) : {},
  events: intrface.events ? await utils.records.mapValuesAsync(intrface.events, async (event) => ({
    ...event,
    schema: await utils.schema.mapZodToJsonSchema(event)
  })) : {},
  actions: intrface.actions ? await utils.records.mapValuesAsync(intrface.actions, async (action) => ({
    ...action,
    input: {
      ...action.input,
      schema: await utils.schema.mapZodToJsonSchema(action.input)
    },
    output: {
      ...action.output,
      schema: await utils.schema.mapZodToJsonSchema(action.output)
    }
  })) : {},
  channels: intrface.channels ? await utils.records.mapValuesAsync(intrface.channels, async (channel) => ({
    ...channel,
    messages: await utils.records.mapValuesAsync(channel.messages, async (message) => ({
      ...message,
      schema: await utils.schema.mapZodToJsonSchema(message)
    }))
  })) : {},
  nameTemplate: intrface.templateName ? {
    script: intrface.templateName,
    language: "handlebars"
  } : void 0
});
const prepareUpdateInterfaceBody = (localInterface, remoteInterface) => {
  const actions = utils.records.setNullOnMissingValues(localInterface.actions, remoteInterface.actions);
  const events = utils.records.setNullOnMissingValues(localInterface.events, remoteInterface.events);
  const entities = utils.records.setNullOnMissingValues(localInterface.entities, remoteInterface.entities);
  const currentChannels = localInterface.channels ? utils.records.mapValues(localInterface.channels, (channel, channelName) => ({
    ...channel,
    messages: utils.records.setNullOnMissingValues(
      channel?.messages,
      remoteInterface.channels[channelName]?.messages
    )
  })) : void 0;
  const channels = utils.records.setNullOnMissingValues(currentChannels, remoteInterface.channels);
  return {
    ...localInterface,
    entities,
    actions,
    events,
    channels
  };
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  prepareCreateInterfaceBody,
  prepareUpdateInterfaceBody
});
//# sourceMappingURL=interface-body.js.map
