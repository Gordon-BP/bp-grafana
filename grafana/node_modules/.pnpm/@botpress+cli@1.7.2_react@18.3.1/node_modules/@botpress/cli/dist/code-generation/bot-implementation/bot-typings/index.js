"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var bot_typings_exports = {};
__export(bot_typings_exports, {
  BotTypingsModule: () => BotTypingsModule
});
module.exports = __toCommonJS(bot_typings_exports);
var consts = __toESM(require("../../consts"));
var import_integration_typings = require("../../integration-implementation/integration-typings");
var import_module = require("../../module");
var import_actions_module = require("./actions-module");
var import_events_module = require("./events-module");
var import_states_module = require("./states-module");
class BotIntegrationsModule extends import_module.ReExportTypeModule {
  constructor(bot) {
    super({
      exportName: "Integrations"
    });
    for (const [alias, integration] of Object.entries(bot.integrations ?? {})) {
      const integrationModule = new import_integration_typings.IntegrationTypingsModule(integration.definition);
      integrationModule.unshift(alias);
      this.pushDep(integrationModule);
    }
  }
}
class BotTypingsModule extends import_module.Module {
  _dependencies;
  constructor(bot) {
    super({
      exportName: "TBot",
      path: consts.INDEX_FILE
    });
    const integrationsModule = new BotIntegrationsModule(bot);
    integrationsModule.unshift("integrations");
    this.pushDep(integrationsModule);
    const eventsModule = new import_events_module.EventsModule(bot.events ?? {});
    eventsModule.unshift("events");
    this.pushDep(eventsModule);
    const statesModule = new import_states_module.StatesModule(bot.states ?? {});
    statesModule.unshift("states");
    this.pushDep(statesModule);
    const actionsModule = new import_actions_module.ActionsModule(bot.actions ?? {});
    actionsModule.unshift("actions");
    this.pushDep(actionsModule);
    this._dependencies = {
      integrationsModule,
      eventsModule,
      statesModule,
      actionsModule
    };
  }
  async getContent() {
    const { integrationsModule, eventsModule, statesModule, actionsModule } = this._dependencies;
    const integrationsImport = integrationsModule.import(this);
    const eventsImport = eventsModule.import(this);
    const statesImport = statesModule.import(this);
    const actionsImport = actionsModule;
    return [
      consts.GENERATED_HEADER,
      `import * as ${integrationsModule.name} from './${integrationsImport}'`,
      `import * as ${eventsModule.name} from './${eventsModule.name}'`,
      `import * as ${statesModule.name} from './${statesModule.name}'`,
      `import * as ${actionsModule.name} from './${actionsImport.name}'`,
      "",
      `export * as ${integrationsModule.name} from './${integrationsImport}'`,
      `export * as ${eventsModule.name} from './${eventsImport}'`,
      `export * as ${statesModule.name} from './${statesImport}'`,
      `export * as ${actionsModule.name} from './${actionsImport.name}'`,
      "",
      "export type TBot = {",
      `  integrations: ${integrationsModule.name}.${integrationsModule.exportName}`,
      `  events: ${eventsModule.name}.${eventsModule.exportName}`,
      `  states: ${statesModule.name}.${statesModule.exportName}`,
      `  actions: ${actionsModule.name}.${actionsModule.exportName}`,
      "}"
    ].join("\n");
  }
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  BotTypingsModule
});
//# sourceMappingURL=index.js.map
