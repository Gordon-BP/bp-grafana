{
  "version": 3,
  "sources": ["../../src/api/types.ts"],
  "sourcesContent": ["import * as client from '@botpress/client'\nimport { Logger } from 'src/logger'\nimport { ApiClient } from './client'\n\nexport type ApiClientProps = {\n  apiUrl: string\n  token: string\n  workspaceId: string\n}\n\nexport type ApiClientFactory = {\n  newClient: (props: ApiClientProps, logger: Logger) => ApiClient\n}\n\nexport type PublicIntegration = client.Integration\nexport type PrivateIntegration = client.Integration & { workspaceId: string }\nexport type Integration = client.Integration & { workspaceId?: string }\nexport type IntegrationSummary = client.ClientOutputs['listIntegrations']['integrations'][number]\n\nexport type BotSummary = client.ClientOutputs['listBots']['bots'][number]\n\nexport type Interface = client.Interface\n\nexport type BaseOperation = (...args: any[]) => Promise<any>\nexport type Operations = {\n  [K in keyof client.Client as client.Client[K] extends BaseOperation ? K : never]: client.Client[K]\n}\nexport type Requests = {\n  [K in keyof Operations]: Parameters<Operations[K]>[0]\n}\nexport type Responses = {\n  [K in keyof Operations]: ReturnType<Operations[K]>\n}\n"],
  "mappings": ";;;;;;;;;;;;;;AAAA;AAAA;",
  "names": []
}
