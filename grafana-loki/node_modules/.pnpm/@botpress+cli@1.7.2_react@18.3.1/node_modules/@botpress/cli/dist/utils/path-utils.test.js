"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var import_vitest = require("vitest");
var pathUtils = __toESM(require("./path-utils"));
(0, import_vitest.describe)("posix", () => {
  (0, import_vitest.test)("isPath with valid relative path should return true", () => {
    (0, import_vitest.expect)(pathUtils.posix.isPath("./src")).toBe(true);
    (0, import_vitest.expect)(pathUtils.posix.isPath("../src")).toBe(true);
    (0, import_vitest.expect)(pathUtils.posix.isPath("./src/services")).toBe(true);
    (0, import_vitest.expect)(pathUtils.posix.isPath("./src/services/index.ts")).toBe(true);
    (0, import_vitest.expect)(pathUtils.posix.isPath("./.././.././../lol.json")).toBe(true);
  });
  (0, import_vitest.test)("isPath with valid absolute path should return true", () => {
    (0, import_vitest.expect)(pathUtils.posix.isPath("/src")).toBe(true);
    (0, import_vitest.expect)(pathUtils.posix.isPath("/src")).toBe(true);
    (0, import_vitest.expect)(pathUtils.posix.isPath("/src/services")).toBe(true);
    (0, import_vitest.expect)(pathUtils.posix.isPath("/src/services/index.ts")).toBe(true);
  });
  (0, import_vitest.test)("isPath with invalid path should return false", () => {
    (0, import_vitest.expect)(pathUtils.posix.isPath("src")).toBe(false);
    (0, import_vitest.expect)(pathUtils.posix.isPath(".src")).toBe(false);
    (0, import_vitest.expect)(pathUtils.posix.isPath("..src")).toBe(false);
    (0, import_vitest.expect)(pathUtils.posix.isPath("src/services")).toBe(false);
    (0, import_vitest.expect)(pathUtils.posix.isPath("src/services/index.ts")).toBe(false);
  });
});
(0, import_vitest.describe)("win32", () => {
  (0, import_vitest.test)("isPath with valid relative path should return true", () => {
    (0, import_vitest.expect)(pathUtils.win32.isPath(".\\src")).toBe(true);
    (0, import_vitest.expect)(pathUtils.win32.isPath("..\\src")).toBe(true);
    (0, import_vitest.expect)(pathUtils.win32.isPath(".\\src\\services")).toBe(true);
    (0, import_vitest.expect)(pathUtils.win32.isPath(".\\src\\services\\index.ts")).toBe(true);
    (0, import_vitest.expect)(pathUtils.win32.isPath(".\\..\\.\\..\\.\\..\\lol.json")).toBe(true);
  });
  (0, import_vitest.test)("isPath with valid absolute path should return true", () => {
    (0, import_vitest.expect)(pathUtils.win32.isPath("C:\\src")).toBe(true);
    (0, import_vitest.expect)(pathUtils.win32.isPath("C:\\src")).toBe(true);
    (0, import_vitest.expect)(pathUtils.win32.isPath("C:\\src\\services")).toBe(true);
    (0, import_vitest.expect)(pathUtils.win32.isPath("C:\\src\\services\\index.ts")).toBe(true);
  });
  (0, import_vitest.test)("isPath with invalid path should return false", () => {
    (0, import_vitest.expect)(pathUtils.win32.isPath("src")).toBe(false);
    (0, import_vitest.expect)(pathUtils.win32.isPath(".src")).toBe(false);
    (0, import_vitest.expect)(pathUtils.win32.isPath("..src")).toBe(false);
    (0, import_vitest.expect)(pathUtils.win32.isPath("src\\services")).toBe(false);
    (0, import_vitest.expect)(pathUtils.win32.isPath("src\\services\\index.ts")).toBe(false);
    (0, import_vitest.expect)(pathUtils.win32.isPath("\\services")).toBe(false);
    (0, import_vitest.expect)(pathUtils.win32.isPath("\\services\\index.ts")).toBe(false);
  });
});
//# sourceMappingURL=path-utils.test.js.map
