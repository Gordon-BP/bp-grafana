"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var integration_implementation_exports = {};
__export(integration_implementation_exports, {
  IntegrationImplementationModule: () => IntegrationImplementationModule
});
module.exports = __toCommonJS(integration_implementation_exports);
var consts = __toESM(require("../consts"));
var import_module = require("../module");
var import_integration_typings = require("./integration-typings");
class IntegrationImplementationModule extends import_module.Module {
  _typingsModule;
  constructor(integration) {
    super({
      path: consts.INDEX_FILE,
      exportName: "Integration"
    });
    this._typingsModule = new import_integration_typings.IntegrationTypingsModule(integration);
    this._typingsModule.unshift("typings");
    this.pushDep(this._typingsModule);
  }
  async getContent() {
    let content = "";
    const typingsImport = this._typingsModule.import(this);
    content += [
      consts.GENERATED_HEADER,
      'import * as sdk from "@botpress/sdk"',
      `import * as ${this._typingsModule.name} from "./${typingsImport}"`,
      `export * from "./${typingsImport}"`,
      "",
      `type TIntegration = sdk.DefaultIntegration<${this._typingsModule.name}.${this._typingsModule.exportName}>`,
      "",
      "export type IntegrationProps = sdk.IntegrationProps<TIntegration>",
      "",
      "export class Integration extends sdk.Integration<TIntegration> {}",
      "",
      "export type Client = sdk.IntegrationSpecificClient<TIntegration>",
      "",
      "// extra types",
      "",
      "type Cast<X, Y> = X extends Y ? X : Y",
      "type ValueOf<T> = T[keyof T]",
      "type AsyncFunction = (...args: any[]) => Promise<any>",
      "",
      "export type HandlerProps = Parameters<IntegrationProps['handler']>[0]",
      "",
      "export type ActionProps = {",
      "  [K in keyof IntegrationProps['actions']]: Parameters<IntegrationProps['actions'][K]>[0]",
      "}",
      "export type AnyActionProps = ValueOf<ActionProps>",
      "",
      "export type MessageProps = {",
      "  [TChannel in keyof IntegrationProps['channels']]: {",
      "    [TMessage in keyof IntegrationProps['channels'][TChannel]['messages']]: Parameters<",
      "      IntegrationProps['channels'][TChannel]['messages'][TMessage]",
      "    >[0]",
      "  }",
      "}",
      "export type AnyMessageProps = ValueOf<ValueOf<MessageProps>>",
      "",
      "export type Context = HandlerProps['ctx']",
      "export type Logger = HandlerProps['logger']",
      "",
      "export type AckFunctions = {",
      "  [TChannel in keyof MessageProps]: {",
      "    [TMessage in keyof MessageProps[TChannel]]: Cast<MessageProps[TChannel][TMessage], AnyMessageProps>['ack']",
      "  }",
      "}",
      "export type AnyAckFunction = ValueOf<ValueOf<AckFunctions>>",
      "",
      "export type ClientOperation = ValueOf<{",
      "  [K in keyof Client as Client[K] extends AsyncFunction ? K : never]: K",
      "}>",
      "export type ClientRequests = {",
      "  [K in ClientOperation]: Parameters<Client[K]>[0]",
      "}",
      "export type ClientResponses = {",
      "  [K in ClientOperation]: Awaited<ReturnType<Client[K]>>",
      "}"
    ].join("\n");
    return content;
  }
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  IntegrationImplementationModule
});
//# sourceMappingURL=integration-implementation.js.map
