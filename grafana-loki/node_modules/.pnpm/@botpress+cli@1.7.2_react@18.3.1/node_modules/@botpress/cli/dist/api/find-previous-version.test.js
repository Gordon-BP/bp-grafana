"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var uuid = __toESM(require("uuid"));
var import_vitest = require("vitest");
var import_find_previous_version = require("./find-previous-version");
class IntegrationFixtureCreator {
  constructor(name) {
    this.name = name;
  }
  t0 = Date.now();
  create = (version) => {
    return {
      id: uuid.v4(),
      name: this.name,
      version,
      public: true,
      createdAt: new Date(this.t0++).toISOString(),
      updatedAt: new Date(this.t0++).toISOString(),
      description: "description",
      title: "title",
      iconUrl: "iconUrl",
      verificationStatus: "approved"
    };
  };
}
(0, import_vitest.test)("find previous integration version", async ({}) => {
  const client2 = {
    listIntegrations: async ({ name }) => {
      const creator = new IntegrationFixtureCreator(name);
      const integrations = [
        creator.create("9.2.0"),
        creator.create("9.2.1"),
        creator.create("9.3.0"),
        creator.create("9.2.2"),
        creator.create("10.0.0")
      ].reverse();
      return { integrations, meta: {} };
    }
  };
  const getPrevious = async (version) => {
    const integration = await (0, import_find_previous_version.findPreviousIntegrationVersion)(client2, {
      type: "name",
      name: "slack",
      version
    });
    return integration?.version;
  };
  (0, import_vitest.expect)(await getPrevious("10.0.1")).toEqual("10.0.0");
  (0, import_vitest.expect)(await getPrevious("10.0.0")).toEqual("9.3.0");
  (0, import_vitest.expect)(await getPrevious("9.3.0")).toEqual("9.2.2");
  (0, import_vitest.expect)(await getPrevious("9.2.2")).toEqual("9.2.1");
  (0, import_vitest.expect)(await getPrevious("9.2.1")).toEqual("9.2.0");
  (0, import_vitest.expect)(await getPrevious("9.2.0")).toEqual(void 0);
});
//# sourceMappingURL=find-previous-version.test.js.map
