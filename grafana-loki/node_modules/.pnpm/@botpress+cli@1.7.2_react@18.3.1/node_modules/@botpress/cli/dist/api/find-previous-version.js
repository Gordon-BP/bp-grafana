"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var find_previous_version_exports = {};
__export(find_previous_version_exports, {
  findPreviousIntegrationVersion: () => findPreviousIntegrationVersion
});
module.exports = __toCommonJS(find_previous_version_exports);
var import_semver = __toESM(require("semver"));
var paging = __toESM(require("./paging"));
const findPreviousIntegrationVersion = async (client2, ref) => {
  const { name, version: targetVersion } = ref;
  const allVersions = await paging.listAllPages(
    async ({ nextToken }) => client2.listIntegrations({ name, nextToken }),
    (r) => r.integrations
  );
  const orderedVersions = allVersions.sort((a, b) => import_semver.default.compare(b.version, a.version));
  const latestVersion = orderedVersions[0];
  if (!latestVersion) {
    return;
  }
  let current = [0, latestVersion];
  while (import_semver.default.gte(current[1].version, targetVersion)) {
    const nextIdx = current[0] + 1;
    const nextIntegration = orderedVersions[nextIdx];
    if (!nextIntegration) {
      break;
    }
    current = [nextIdx, nextIntegration];
  }
  const previous = current[1];
  if (import_semver.default.gte(previous.version, targetVersion)) {
    return;
  }
  return previous;
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  findPreviousIntegrationVersion
});
//# sourceMappingURL=find-previous-version.js.map
