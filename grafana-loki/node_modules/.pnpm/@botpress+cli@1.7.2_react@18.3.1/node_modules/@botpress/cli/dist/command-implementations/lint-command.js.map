{
  "version": 3,
  "sources": ["../../src/command-implementations/lint-command.ts"],
  "sourcesContent": ["import { type IntegrationDefinition, type BotDefinition, type InterfaceDeclaration } from '@botpress/sdk'\nimport { prepareCreateBotBody } from '../api/bot-body'\nimport { prepareCreateIntegrationBody } from '../api/integration-body'\nimport { prepareCreateInterfaceBody } from '../api/interface-body'\nimport type commandDefinitions from '../command-definitions'\nimport * as errors from '../errors'\nimport { BotLinter } from '../linter/bot-linter'\nimport { IntegrationLinter } from '../linter/integration-linter'\nimport { InterfaceLinter } from '../linter/interface-linter'\nimport { getImplementationStatements } from '../sdk'\nimport { ProjectCommand } from './project-command'\n\nexport type LintCommandDefinition = typeof commandDefinitions.lint\nexport class LintCommand extends ProjectCommand<LintCommandDefinition> {\n  public async run(): Promise<void> {\n    const projectDef = await this.readProjectDefinitionFromFS()\n    if (projectDef.bpLintDisabled) {\n      this.logger.warn(\n        'Linting is disabled for this project because of a bplint directive. To enable linting, remove the \"bplint-disable\" directive from the project definition file'\n      )\n      return\n    }\n\n    switch (projectDef.type) {\n      case 'integration':\n        return this._runLintForIntegration(projectDef.definition)\n      case 'bot':\n        return this._runLintForBot(projectDef.definition)\n      case 'interface':\n        return this._runLintForInterface(projectDef.definition)\n      default:\n        throw new errors.BotpressCLIError('Unsupported project type')\n    }\n  }\n\n  private async _runLintForInterface(definition: InterfaceDeclaration): Promise<void> {\n    const parsedInterfaceDefinition = await prepareCreateInterfaceBody(definition)\n    const linter = new InterfaceLinter(parsedInterfaceDefinition)\n\n    await linter.lint()\n    linter.logResults(this.logger)\n\n    if (linter.hasErrors()) {\n      throw new errors.BotpressCLIError('Interface definition contains linting errors')\n    }\n\n    this.logger.success('Interface definition is valid')\n  }\n\n  private async _runLintForBot(definition: BotDefinition): Promise<void> {\n    const strippedDefinition = this._stripAutoGeneratedContentFromBot(definition)\n    const parsedBotDefinition = await prepareCreateBotBody(strippedDefinition)\n    const linter = new BotLinter(parsedBotDefinition)\n\n    await linter.lint()\n    linter.logResults(this.logger)\n\n    if (linter.hasErrors()) {\n      throw new errors.BotpressCLIError('Bot definition contains linting errors')\n    }\n\n    this.logger.success('Bot definition is valid')\n  }\n\n  private _stripAutoGeneratedContentFromBot(definition: BotDefinition) {\n    return {\n      ...definition,\n      integrations: {},\n    } as BotDefinition\n  }\n\n  private async _runLintForIntegration(definition: IntegrationDefinition): Promise<void> {\n    const strippedDefinition = this._stripAutoGeneratedContentFromIntegration(definition)\n    const parsedIntegrationDefinition = await prepareCreateIntegrationBody(strippedDefinition)\n    const linter = new IntegrationLinter({ ...parsedIntegrationDefinition, secrets: strippedDefinition.secrets })\n\n    await linter.lint()\n    linter.logResults(this.logger)\n\n    if (linter.hasErrors()) {\n      throw new errors.BotpressCLIError('Integration definition contains linting errors')\n    }\n\n    this.logger.success('Integration definition is valid')\n  }\n\n  private _stripAutoGeneratedContentFromIntegration(definition: IntegrationDefinition) {\n    const { actionNames, eventNames } = this._getAutoGeneratedContentOfIntegration(definition)\n\n    return {\n      ...definition,\n      actions: Object.fromEntries(Object.entries(definition.actions ?? {}).filter(([key]) => !actionNames.has(key))),\n      events: Object.fromEntries(Object.entries(definition.events ?? {}).filter(([key]) => !eventNames.has(key))),\n    } as IntegrationDefinition\n  }\n\n  private _getAutoGeneratedContentOfIntegration(definition: IntegrationDefinition) {\n    const actionNames = new Set<string>()\n    const eventNames = new Set<string>()\n\n    const interfacesStatements = getImplementationStatements(definition)\n    for (const iface of Object.values(interfacesStatements)) {\n      for (const actionDefinition of Object.values(iface.actions)) {\n        actionNames.add(actionDefinition.name)\n      }\n      for (const eventDefinition of Object.values(iface.events)) {\n        eventNames.add(eventDefinition.name)\n      }\n    }\n\n    return { actionNames, eventNames } as const\n  }\n}\n"],
  "mappings": "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",
  "names": ["import_sdk"]
}
