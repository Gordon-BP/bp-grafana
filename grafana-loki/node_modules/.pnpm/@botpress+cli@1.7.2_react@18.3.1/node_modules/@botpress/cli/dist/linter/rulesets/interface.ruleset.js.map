{
  "version": 3,
  "sources": ["../../../src/linter/rulesets/interface.ruleset.ts"],
  "sourcesContent": ["import { type RulesetDefinition } from '@stoplight/spectral-core'\nimport { falsy } from '@stoplight/spectral-functions'\nimport { truthyWithMessage } from '../spectral-functions'\n\nexport const INTERFACE_RULESET = {\n  extends: [],\n  rules: {\n    'action-inputparams-should-have-a-title': {\n      description: 'All action input parameters SHOULD have a title',\n      message: '{{description}}: {{error}} SHOULD provide a non-empty title by using .title() in its Zod schema',\n      severity: 'warn',\n      given: '$.actions[*].input..schema.properties[*].x-zui',\n      then: [\n        {\n          field: 'title',\n          function: truthyWithMessage(({ path }) => `input parameter \"${path.at(-3)}\" of action \"${path[1]}\"`),\n        },\n      ],\n    },\n    'action-inputparams-must-have-a-description': {\n      description: 'All action input parameters MUST have a description',\n      message: '{{description}}: {{error}} MUST provide a non-empty description by using .describe() in its Zod schema',\n      severity: 'error',\n      given: '$.actions[*].input..schema.properties[*]',\n      then: [\n        {\n          field: 'description',\n          function: truthyWithMessage(({ path }) => `input parameter \"${path.at(-2)}\" of action \"${path[1]}\"`),\n        },\n      ],\n    },\n    'action-outputparams-should-have-a-title': {\n      description: 'All action output parameters SHOULD have a title',\n      message: '{{description}}: {{error}} SHOULD provide a non-empty title by using .title() in its Zod schema',\n      severity: 'warn',\n      given: '$.actions[*].output..schema.properties[*].x-zui',\n      then: [\n        {\n          field: 'title',\n          function: truthyWithMessage(({ path }) => `output parameter \"${path.at(-3)}\" of action \"${path[1]}\"`),\n        },\n      ],\n    },\n    'action-outputparams-must-have-a-description': {\n      description: 'All action output parameters MUST have a description',\n      message: '{{description}}: {{error}} MUST provide a non-empty description by using .describe() in its Zod schema',\n      severity: 'error',\n      given: '$.actions[*].output..schema.properties[*]',\n      then: [\n        {\n          field: 'description',\n          function: truthyWithMessage(({ path }) => `output parameter \"${path.at(-2)}\" of action \"${path[1]}\"`),\n        },\n      ],\n    },\n    'event-outputparams-should-have-title': {\n      description: 'All event output parameters SHOULD have a title',\n      message: '{{description}}: {{error}} SHOULD provide a non-empty title by using .title() in its Zod schema',\n      severity: 'warn',\n      given: '$.events[*]..schema.properties[*]',\n      then: [\n        {\n          field: 'x-zui.title',\n          function: truthyWithMessage(({ path }) => `output parameter \"${path.at(-3)}\" of event \"${path[1]}\"`),\n        },\n      ],\n    },\n    'event-outputparams-must-have-description': {\n      description: 'All event output parameters MUST have a description',\n      message:\n        '{{description}}: {{error}} SHOULD provide a non-empty description by using .describe() in its Zod schema',\n      severity: 'error',\n      given: '$.events[*]..schema.properties[*]',\n      then: [\n        {\n          field: 'description',\n          function: truthyWithMessage(({ path }) => `output parameter \"${path.at(-2)}\" of event \"${path[1]}\"`),\n        },\n      ],\n    },\n    'legacy-zui-title-should-be-removed': {\n      description:\n        'Legacy ZUI title fields (ui.title) SHOULD be removed. Please use .title() in your Zod schemas instead',\n      severity: 'error',\n      given: '$..ui[*].title',\n      then: [{ function: falsy }],\n    },\n    'legacy-zui-examples-should-be-removed': {\n      description: 'Legacy ZUI examples fields (ui.examples) SHOULD be removed. There are currently no alternatives',\n      severity: 'hint',\n      given: '$..ui[*].examples',\n      then: [{ function: falsy }],\n    },\n    'entities-should-have-a-title': {\n      description: 'All entities SHOULD have a title',\n      message: '{{description}}: {{error}} SHOULD have a non-empty title',\n      severity: 'warn',\n      given: '$.entities[*]',\n      then: [{ field: 'title', function: truthyWithMessage(({ path }) => `entity \"${path[1]}\"`) }],\n    },\n    'entities-must-have-a-description': {\n      description: 'All entities MUST have a description',\n      message: '{{description}}: {{error}} MUST have a non-empty description',\n      severity: 'error',\n      given: '$.entities[*]',\n      then: [{ field: 'description', function: truthyWithMessage(({ path }) => `entity \"${path[1]}\"`) }],\n    },\n    'entity-fields-should-have-a-title': {\n      description: 'All entity fields SHOULD have a title',\n      message: '{{description}}: {{error}} SHOULD provide a non-empty title by using .title() in its Zod schema',\n      severity: 'warn',\n      given: '$.entities[*]..schema.properties[*]',\n      then: [\n        {\n          field: 'x-zui.title',\n          function: truthyWithMessage(({ path }) => `field \"${path.at(-3)}\" of entity \"${path[1]}\"`),\n        },\n      ],\n    },\n    'entity-fields-must-have-a-description': {\n      description: 'All entity fields MUST have a description',\n      message: '{{description}}: {{error}} MUST provide a non-empty description by using .describe() in its Zod schema',\n      severity: 'error',\n      given: '$.entities[*]..schema.properties[*]',\n      then: [\n        {\n          field: 'description',\n          function: truthyWithMessage(({ path }) => `field \"${path.at(-2)}\" of entity \"${path[1]}\"`),\n        },\n      ],\n    },\n  },\n} satisfies RulesetDefinition\n"],
  "mappings": "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",
  "names": ["import_spectral_functions"]
}
