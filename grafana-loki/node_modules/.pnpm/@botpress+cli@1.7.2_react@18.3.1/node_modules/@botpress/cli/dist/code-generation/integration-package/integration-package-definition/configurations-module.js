"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var configurations_module_exports = {};
__export(configurations_module_exports, {
  ConfigurationModule: () => ConfigurationModule,
  ConfigurationsModule: () => ConfigurationsModule
});
module.exports = __toCommonJS(configurations_module_exports);
var import_generators = require("../../generators");
var import_module = require("../../module");
var strings = __toESM(require("../../strings"));
class ConfigurationModule extends import_module.Module {
  constructor(name, _configuration) {
    const configurationName = name;
    const exportName = strings.varName(`${configurationName}Config`);
    super({
      path: `${name}.ts`,
      exportName
    });
    this._configuration = _configuration;
  }
  async getContent() {
    const { schema } = this._configuration;
    if (!schema) {
      return `export const ${this.exportName} = z.object({});`;
    }
    return (0, import_generators.jsonSchemaToTypescriptZuiSchema)(schema, this.exportName);
  }
}
class ConfigurationsModule extends import_module.ReExportVariableModule {
  constructor(configurations) {
    super({ exportName: strings.varName("configurations") });
    for (const [configurationName, configuration] of Object.entries(configurations)) {
      const module2 = new ConfigurationModule(configurationName, configuration);
      this.pushDep(module2);
    }
  }
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  ConfigurationModule,
  ConfigurationsModule
});
//# sourceMappingURL=configurations-module.js.map
