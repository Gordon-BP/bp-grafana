{
  "version": 3,
  "sources": ["../../src/code-generation/module.ts"],
  "sourcesContent": ["import { posix as pathlib } from 'path'\nimport * as utils from '../utils'\nimport * as consts from './consts'\nimport * as strings from './strings'\nimport { File } from './typings'\n\nexport type ModuleProps = {\n  path: string\n  exportName: string\n}\n\nexport abstract class Module {\n  private _localDependencies: Module[] = []\n\n  public get path(): string {\n    return this._def.path\n  }\n\n  /**\n   * @returns file name without extension\n   */\n  public get name(): string {\n    const basename = pathlib.basename(this.path)\n    if (basename === consts.INDEX_FILE) {\n      const dirname = pathlib.basename(pathlib.dirname(this.path))\n      return dirname\n    }\n    const withoutExtension = utils.path.rmExtension(basename)\n    return withoutExtension\n  }\n\n  public get isDefaultExport(): boolean {\n    return this._def.exportName === consts.DEFAULT_EXPORT_NAME\n  }\n\n  public get exportName(): string {\n    return this._def.exportName\n  }\n\n  public get deps(): Module[] {\n    return [...this._localDependencies]\n  }\n\n  protected constructor(private _def: ModuleProps) {}\n\n  public abstract getContent(): Promise<string>\n\n  public pushDep(...dependencies: Module[]): this {\n    this._localDependencies.push(...dependencies)\n    return this\n  }\n\n  public unshift(...basePath: string[]): this {\n    this._def = {\n      ...this._def,\n      path: pathlib.join(...basePath, this._def.path),\n    }\n    this._localDependencies = this._localDependencies.map((d) => d.unshift(...basePath))\n    return this\n  }\n\n  public async toFile(): Promise<File> {\n    return {\n      path: this.path,\n      content: await this.getContent(),\n    }\n  }\n\n  public async flatten(): Promise<File[]> {\n    const self = await this.toFile()\n    const allFiles: File[] = [self]\n    for (const dep of this._localDependencies) {\n      const depFiles = await dep.flatten()\n      allFiles.push(...depFiles)\n    }\n    return allFiles\n  }\n\n  public import(base: Module): string {\n    let relativePath = pathlib.relative(pathlib.dirname(base.path), this.path)\n    relativePath = pathlib.join('.', relativePath)\n    return utils.path.rmExtension(relativePath)\n  }\n}\n\nexport class ReExportTypeModule extends Module {\n  protected constructor(def: { exportName: string }) {\n    super({\n      ...def,\n      path: consts.INDEX_FILE,\n    })\n  }\n\n  public async getContent(): Promise<string> {\n    let content = consts.GENERATED_HEADER\n\n    for (const m of this.deps) {\n      const { name } = m\n      const importAlias = strings.importAlias(name)\n      const importFrom = m.import(this)\n      content += `import * as ${importAlias} from \"./${importFrom}\";\\n`\n      content += `export * as ${importAlias} from \"./${importFrom}\";\\n`\n    }\n\n    content += '\\n'\n\n    content += `export type ${this.exportName} = {\\n`\n    for (const { name, exportName: exports } of this.deps) {\n      const importAlias = strings.importAlias(name)\n      content += `  \"${name}\": ${importAlias}.${exports};\\n`\n    }\n    content += '}'\n\n    content += '\\n'\n\n    return content\n  }\n}\n\nexport class ReExportVariableModule extends Module {\n  protected constructor(def: { exportName: string }) {\n    super({\n      ...def,\n      path: consts.INDEX_FILE,\n    })\n  }\n\n  public async getContent(): Promise<string> {\n    let content = consts.GENERATED_HEADER\n\n    for (const m of this.deps) {\n      const { name } = m\n      const importAlias = strings.importAlias(name)\n      const importFrom = m.import(this)\n      content += `import * as ${importAlias} from \"./${importFrom}\";\\n`\n      content += `export * as ${importAlias} from \"./${importFrom}\";\\n`\n    }\n\n    content += '\\n'\n\n    content += `export const ${this.exportName} = {\\n`\n    for (const { name, exportName: exports } of this.deps) {\n      const importAlias = strings.importAlias(name)\n      content += `  \"${name}\": ${importAlias}.${exports},\\n`\n    }\n    content += '}'\n\n    content += '\\n'\n\n    return content\n  }\n}\n"],
  "mappings": "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",
  "names": ["pathlib"]
}
