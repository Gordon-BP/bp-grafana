{
  "version": 3,
  "sources": ["../../src/command-implementations/bundle-command.ts"],
  "sourcesContent": ["import chalk from 'chalk'\nimport { SingleLineLogger } from 'src/logger'\nimport type commandDefinitions from '../command-definitions'\nimport * as errors from '../errors'\nimport * as utils from '../utils'\nimport { ProjectCommand } from './project-command'\n\nexport type BundleCommandDefinition = typeof commandDefinitions.bundle\nexport class BundleCommand extends ProjectCommand<BundleCommandDefinition> {\n  public async run(): Promise<void> {\n    const projectDef = await this.readProjectDefinitionFromFS()\n\n    if (projectDef.type === 'interface') {\n      this.logger.success('Interface projects have no implementation to bundle.')\n      return\n    }\n\n    const line = this.logger.line()\n\n    if (projectDef.type === 'integration') {\n      const { name } = projectDef.definition\n      line.started(`Bundling integration ${chalk.bold(name)}...`)\n      return await this._bundle(line)\n    }\n\n    if (projectDef.type === 'bot') {\n      line.started('Bundling bot...')\n      return await this._bundle(line)\n    }\n\n    throw new errors.UnsupportedProjectType()\n  }\n\n  private async _bundle(line: SingleLineLogger) {\n    const logLevel = this.argv.verbose ? 'info' : 'silent'\n    const abs = this.projectPaths.abs\n    const rel = this.projectPaths.rel('workDir')\n\n    const unixPath = utils.path.toUnix(rel.entryPoint)\n    const importFrom = utils.path.rmExtension(unixPath)\n    const code = `import x from './${importFrom}'; export default x; export const handler = x.handler;`\n\n    const outfile = abs.outFile // TODO: ensure dir exists\n    line.debug(`Writing bundle to ${outfile}`)\n\n    await utils.esbuild.buildCode({\n      code,\n      cwd: abs.workDir,\n      outfile,\n      logLevel,\n      write: true,\n      sourcemap: this.argv.sourceMap,\n      minify: this.argv.minify,\n    })\n\n    line.success(`Bundle available at ${chalk.grey(rel.outDir)}`)\n  }\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAAkB;AAGlB,aAAwB;AACxB,YAAuB;AACvB,6BAA+B;AAGxB,MAAM,sBAAsB,sCAAwC;AAAA,EACzE,MAAa,MAAqB;AAChC,UAAM,aAAa,MAAM,KAAK,4BAA4B;AAE1D,QAAI,WAAW,SAAS,aAAa;AACnC,WAAK,OAAO,QAAQ,sDAAsD;AAC1E;AAAA,IACF;AAEA,UAAM,OAAO,KAAK,OAAO,KAAK;AAE9B,QAAI,WAAW,SAAS,eAAe;AACrC,YAAM,EAAE,KAAK,IAAI,WAAW;AAC5B,WAAK,QAAQ,wBAAwB,aAAAA,QAAM,KAAK,IAAI,MAAM;AAC1D,aAAO,MAAM,KAAK,QAAQ,IAAI;AAAA,IAChC;AAEA,QAAI,WAAW,SAAS,OAAO;AAC7B,WAAK,QAAQ,iBAAiB;AAC9B,aAAO,MAAM,KAAK,QAAQ,IAAI;AAAA,IAChC;AAEA,UAAM,IAAI,OAAO,uBAAuB;AAAA,EAC1C;AAAA,EAEA,MAAc,QAAQ,MAAwB;AAC5C,UAAM,WAAW,KAAK,KAAK,UAAU,SAAS;AAC9C,UAAM,MAAM,KAAK,aAAa;AAC9B,UAAM,MAAM,KAAK,aAAa,IAAI,SAAS;AAE3C,UAAM,WAAW,MAAM,KAAK,OAAO,IAAI,UAAU;AACjD,UAAM,aAAa,MAAM,KAAK,YAAY,QAAQ;AAClD,UAAM,OAAO,oBAAoB;AAEjC,UAAM,UAAU,IAAI;AACpB,SAAK,MAAM,qBAAqB,SAAS;AAEzC,UAAM,MAAM,QAAQ,UAAU;AAAA,MAC5B;AAAA,MACA,KAAK,IAAI;AAAA,MACT;AAAA,MACA;AAAA,MACA,OAAO;AAAA,MACP,WAAW,KAAK,KAAK;AAAA,MACrB,QAAQ,KAAK,KAAK;AAAA,IACpB,CAAC;AAED,SAAK,QAAQ,uBAAuB,aAAAA,QAAM,KAAK,IAAI,MAAM,GAAG;AAAA,EAC9D;AACF;",
  "names": ["chalk"]
}
