{
  "version": 3,
  "sources": ["../../../src/linter/rulesets/bot.ruleset.ts"],
  "sourcesContent": ["import { type RulesetDefinition } from '@stoplight/spectral-core'\nimport { falsy } from '@stoplight/spectral-functions'\nimport { truthyWithMessage } from '../spectral-functions'\n\nexport const BOT_RULESET = {\n  extends: [],\n  rules: {\n    'event-outputparams-should-have-title': {\n      description: 'All event output parameters SHOULD have a title',\n      message: '{{description}}: {{error}} SHOULD provide a non-empty title by using .title() in its Zod schema',\n      severity: 'warn',\n      given: '$.events[*]..schema.properties[*]',\n      then: [\n        {\n          field: 'x-zui.title',\n          function: truthyWithMessage(({ path }) => `output parameter \"${path.at(-3)}\" of event \"${path[1]}\"`),\n        },\n      ],\n    },\n    'event-outputparams-must-have-description': {\n      description: 'All event output parameters MUST have a description',\n      message:\n        '{{description}}: {{error}} SHOULD provide a non-empty description by using .describe() in its Zod schema',\n      severity: 'error',\n      given: '$.events[*]..schema.properties[*]',\n      then: [\n        {\n          field: 'description',\n          function: truthyWithMessage(({ path }) => `output parameter \"${path.at(-2)}\" of event \"${path[1]}\"`),\n        },\n      ],\n    },\n    'configuration-fields-must-have-a-title': {\n      description: 'All configuration fields MUST have a title',\n      message: '{{description}}: {{error}} MUST provide a non-empty title by using .title() in its Zod schema',\n      severity: 'error',\n      given: '$.configuration..schema.properties[*].x-zui',\n      then: [\n        {\n          field: 'title',\n          function: truthyWithMessage(({ path }) => `configuration parameter \"${path.at(-3)}\"`),\n        },\n      ],\n    },\n    'configuration-fields-must-have-a-description': {\n      description: 'All configuration fields MUST have a description',\n      message: '{{description}}: {{error}} MUST provide a non-empty description by using .describe() in its Zod schema',\n      severity: 'error',\n      given: '$.configuration..schema.properties[*]',\n      then: [\n        {\n          field: 'description',\n          function: truthyWithMessage(({ path }) => `configuration parameter \"${path.at(-2)}\"`),\n        },\n      ],\n    },\n    'user-tags-should-have-a-title': {\n      description: 'All user tags SHOULD have a title',\n      message: '{{description}}: {{error}} SHOULD have a non-empty title',\n      severity: 'warn',\n      given: '$.user.tags[*]',\n      then: [\n        {\n          field: 'title',\n          function: truthyWithMessage(({ path }) => `user tag \"${path[2]}\"`),\n        },\n      ],\n    },\n    'user-tags-must-have-a-description': {\n      description: 'All user tags MUST have a description',\n      message: '{{description}}: {{error}} MUST have a non-empty description',\n      severity: 'error',\n      given: '$.user.tags[*]',\n      then: [\n        {\n          field: 'description',\n          function: truthyWithMessage(({ path }) => `user tag \"${path[2]}\"`),\n        },\n      ],\n    },\n    'conversation-tags-should-have-a-title': {\n      description: 'All conversation tags SHOULD have a title',\n      message: '{{description}}: {{error}} SHOULD have a non-empty title',\n      severity: 'warn',\n      given: '$.conversation.tags[*]',\n      then: [\n        {\n          field: 'title',\n          function: truthyWithMessage(({ path }) => `conversation tag \"${path[2]}\"`),\n        },\n      ],\n    },\n    'conversation-tags-must-have-a-description': {\n      description: 'All conversation tags MUST have a description',\n      message: '{{description}}: {{error}} MUST have a non-empty description',\n      severity: 'error',\n      given: '$.conversation.tags[*]',\n      then: [\n        {\n          field: 'description',\n          function: truthyWithMessage(({ path }) => `conversation tag \"${path[2]}\"`),\n        },\n      ],\n    },\n    'message-tags-should-have-a-title': {\n      description: 'All message tags SHOULD have a title',\n      message: '{{description}}: {{error}} SHOULD have a non-empty title',\n      severity: 'warn',\n      given: '$.message.tags[*]',\n      then: [\n        {\n          field: 'title',\n          function: truthyWithMessage(({ path }) => `message tag \"${path[2]}\"`),\n        },\n      ],\n    },\n    'message-tags-must-have-a-description': {\n      description: 'All message tags MUST have a description',\n      message: '{{description}}: {{error}} MUST have a non-empty description',\n      severity: 'error',\n      given: '$.message.tags[*]',\n      then: [\n        {\n          field: 'description',\n          function: truthyWithMessage(({ path }) => `message tag \"${path[2]}\"`),\n        },\n      ],\n    },\n    'legacy-zui-title-should-be-removed': {\n      description:\n        'Legacy ZUI title fields (ui.title) SHOULD be removed. Please use .title() in your Zod schemas instead',\n      severity: 'error',\n      given: '$..ui[*].title',\n      then: [{ function: falsy }],\n    },\n    'legacy-zui-examples-should-be-removed': {\n      description: 'Legacy ZUI examples fields (ui.examples) SHOULD be removed. There are currently no alternatives',\n      severity: 'hint',\n      given: '$..ui[*].examples',\n      then: [{ function: falsy }],\n    },\n    'state-fields-should-have-title': {\n      description: 'All state fields SHOULD have a title',\n      message: '{{description}}: {{error}} SHOULD provide a non-empty title by using .title() in its Zod schema',\n      severity: 'warn',\n      given: '$.states[*]..schema.properties[*]',\n      then: [\n        {\n          field: 'x-zui.title',\n          function: truthyWithMessage(({ path }) => `field \"${path.at(-3)}\" of state \"${path[1]}\"`),\n        },\n      ],\n    },\n    'state-fields-must-have-description': {\n      description: 'All state fields MUST have a description',\n      message:\n        '{{description}}: {{error}} SHOULD provide a non-empty description by using .describe() in its Zod schema',\n      severity: 'error',\n      given: '$.states[*]..schema.properties[*]',\n      then: [\n        {\n          field: 'description',\n          function: truthyWithMessage(({ path }) => `field \"${path.at(-2)}\" of state \"${path[1]}\"`),\n        },\n      ],\n    },\n  },\n} satisfies RulesetDefinition\n"],
  "mappings": "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",
  "names": ["import_spectral_functions"]
}
